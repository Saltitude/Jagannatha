// Compiled shader for custom platforms

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Shader Graphs/sh_crystal_pillier" {
Properties {
[NoScaleOffset]  Texture2D_B857C0CC ("Texture", 2D) = "white" { }
 Color_C8B04CD6 ("Color", Color) = (1.000000,0.454118,0.000000,0.000000)
 Vector1_BEE363EB ("value", Range(0.000000,10.000000)) = 2.000000
 Vector2_A455A09 ("speed", Vector) = (1.000000,1.000000,0.000000,0.000000)
 Vector2_CE5DC7AB ("taille", Vector) = (1.000000,1.000000,0.000000,0.000000)
[NoScaleOffset]  Texture2D_CAC5E1DB ("t_crystal", 2D) = "white" { }
[NoScaleOffset]  Texture2D_8FF63723 ("Mask_pilier", 2D) = "white" { }
}
SubShader { 
 Tags { "QUEUE"="Geometry+0" "RenderType"="Opaque" "RenderPipeline"="UniversalPipeline" }


 // Stats for Vertex shader:
 //        d3d11: 9 avg math (8..10)
 // Stats for Fragment shader:
 //        d3d11: 8 math, 3 texture
 Pass {
  Name "Pass"
  Tags { "QUEUE"="Geometry+0" "RenderType"="Opaque" "RenderPipeline"="UniversalPipeline" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 8 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[1349], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_temps 2
   0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
   1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
   2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   3: add r0.xyz, r0.xyzx, cb1[3].xyzx
   4: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
   5: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
   6: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
   7: add o0.xyzw, r0.xyzw, cb0[1348].xyzw
   8: mov o1.xyzw, v3.xyzw
   9: mov o2.xyzw, v4.xyzw
  10: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 8 math, 3 temp registers, 3 textures
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Vector4 _TimeParameters at 20704
}
Constant Buffer "UnityPerMaterial" (48 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 20
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1295], immediateIndexed
      dcl_constantbuffer CB1[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: mul r0.xy, v1.xyxx, cb1[2].xyxx
   1: mul r0.zw, cb0[1294].xxxx, cb1[1].yyyz
   2: sample r1.xyzw, v1.xyxx, t2.xyzw, s2
   3: mad r0.xy, r0.xyxx, r1.xyxx, r0.zwzz
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mul r0.xyz, r0.xyzx, cb1[0].xyzx
   6: mul r2.xyz, v2.xyzx, cb1[1].xxxx
   7: mul r0.xyz, r0.xyzx, r2.xyzx
   8: sample r2.xyzw, v1.xyxx, t1.xyzw, s1
   9: mad r0.xyz, r0.xyzx, r2.xyzx, -r2.xyzx
  10: mad o0.xyz, r1.xyzx, r0.xyzx, r2.xyzx
  11: mov o0.w, l(1.000000)
  12: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _TimeParameters;
uniform 	vec4 Color_C8B04CD6;
uniform 	float Vector1_BEE363EB;
uniform 	vec2 Vector2_A455A09;
uniform 	vec2 Vector2_CE5DC7AB;
uniform lowp sampler2D Texture2D_CAC5E1DB;
uniform lowp sampler2D Texture2D_8FF63723;
uniform lowp sampler2D Texture2D_B857C0CC;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat10_1.xyz = texture2D(Texture2D_8FF63723, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xy = u_xlat0.xy * u_xlat10_1.xy + u_xlat6.xy;
    u_xlat10_0.xyz = texture2D(Texture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat10_2.xyz = texture2D(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_2.xyz + (-u_xlat10_2.xyz);
    u_xlat0.xyz = u_xlat10_1.xyz * u_xlat0.xyz + u_xlat10_2.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (64 bytes) {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 Color_C8B04CD6;
	UNITY_UNIFORM float Vector1_BEE363EB;
	UNITY_UNIFORM vec2 Vector2_A455A09;
	UNITY_UNIFORM vec2 Vector2_CE5DC7AB;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform mediump sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform mediump sampler2D Texture2D_8FF63723;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat16_1.xyz = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xy = u_xlat0.xy * u_xlat16_1.xy + u_xlat6.xy;
    u_xlat16_0.xyz = texture(Texture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat16_2.xyz = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "VGlobals" (64 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_ProbesOcclusion;
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.TEXCOORD0 = input.TEXCOORD0;
    output.TEXCOORD1 = input.COLOR0;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _TimeParameters;
};

struct UnityPerMaterial_Type
{
    float4 Color_C8B04CD6;
    float Vector1_BEE363EB;
    float2 Vector2_A455A09;
    float2 Vector2_CE5DC7AB;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler samplerTexture2D_B857C0CC [[ sampler (0) ]],
    sampler samplerTexture2D_CAC5E1DB [[ sampler (1) ]],
    sampler samplerTexture2D_8FF63723 [[ sampler (2) ]],
    texture2d<float, access::sample > Texture2D_B857C0CC [[ texture(0) ]] ,
    texture2d<float, access::sample > Texture2D_CAC5E1DB [[ texture(1) ]] ,
    texture2d<float, access::sample > Texture2D_8FF63723 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float2 u_xlat6;
    u_xlat0.xy = input.TEXCOORD0.xy * UnityPerMaterial.Vector2_CE5DC7AB.xyxx.xy;
    u_xlat6.xy = FGlobals._TimeParameters.xx * UnityPerMaterial.Vector2_A455A09.xxyx.yz;
    u_xlat1.xyz = Texture2D_8FF63723.sample(samplerTexture2D_8FF63723, input.TEXCOORD0.xy).xyz;
    u_xlat0.xy = fma(u_xlat0.xy, u_xlat1.xy, u_xlat6.xy);
    u_xlat0.xyz = Texture2D_B857C0CC.sample(samplerTexture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * UnityPerMaterial.Color_C8B04CD6.xyz;
    u_xlat2.xyz = input.TEXCOORD1.xyz * float3(UnityPerMaterial.Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = Texture2D_CAC5E1DB.sample(samplerTexture2D_CAC5E1DB, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat2.xyz));
    output.SV_TARGET0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat2.xyz);
    output.SV_TARGET0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (64 bytes) {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 331 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
UNITY_BINDING(1) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
in  vec3 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
UNITY_BINDING(0) uniform UnityPerMaterial {
	vec4 Color_C8B04CD6;
	float Vector1_BEE363EB;
	vec2 Vector2_A455A09;
	vec2 Vector2_CE5DC7AB;
};
UNITY_LOCATION(0) uniform  sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform  sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform  sampler2D Texture2D_8FF63723;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_TARGET0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat10_1 = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat0.xy * u_xlat10_1.xy + u_xlat6.xy;
    u_xlat10_0 = texture(Texture2D_B857C0CC, u_xlat0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat10_2 = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_2.xyz + (-u_xlat10_2.xyz);
    SV_TARGET0.xyz = u_xlat10_1.xyz * u_xlat0.xyz + u_xlat10_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Set 2D Texture "Texture2D_8FF63723" to set: 0, binding: 5, used in: Fragment  using sampler in set: 0, binding: 2, used in: Fragment 
Set 2D Texture "Texture2D_B857C0CC" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 
Set 2D Texture "Texture2D_CAC5E1DB" to set: 0, binding: 4, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals2529311593" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on set: 1, binding: 3, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on set: 1, binding: 1, used in: Fragment  {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "VGlobals2529311593" (64 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 114

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 12 94 101 103 105 106
                              Name 101  "vs_TEXCOORD0"
                              Name 105  "vs_TEXCOORD1"
                              Decorate 12 Location 0
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 64
                              MemberDecorate 21 2 Offset 128
                              MemberDecorate 21 3 RelaxedPrecision
                              MemberDecorate 21 3 Offset 144
                              MemberDecorate 21 4 RelaxedPrecision
                              MemberDecorate 21 4 Offset 160
                              MemberDecorate 21 5 RelaxedPrecision
                              MemberDecorate 21 5 Offset 176
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 RelaxedPrecision
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 RelaxedPrecision
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 RelaxedPrecision
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 RelaxedPrecision
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 RelaxedPrecision
                              MemberDecorate 21 13 Offset 320
                              MemberDecorate 21 14 RelaxedPrecision
                              MemberDecorate 21 14 Offset 336
                              MemberDecorate 21 15 RelaxedPrecision
                              MemberDecorate 21 15 Offset 352
                              MemberDecorate 21 16 RelaxedPrecision
                              MemberDecorate 21 16 Offset 368
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 3
                              Decorate 69 ArrayStride 16
                              MemberDecorate 70 0 Offset 0
                              Decorate 70 Block
                              Decorate 72 DescriptorSet 1
                              Decorate 72 Binding 2
                              MemberDecorate 92 0 BuiltIn Position
                              MemberDecorate 92 1 BuiltIn PointSize
                              MemberDecorate 92 2 BuiltIn ClipDistance
                              Decorate 92 Block
                              Decorate 101(vs_TEXCOORD0) Location 0
                              Decorate 103 Location 1
                              Decorate 105(vs_TEXCOORD1) Location 1
                              Decorate 106 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:     15(int) Constant 2
              20:             TypeArray 7(fvec4) 19
              21:             TypeStruct 17 18 7(fvec4) 7(fvec4) 7(fvec4) 20 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 0
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              45:     24(int) Constant 2
              59:     24(int) Constant 3
              66:      8(ptr) Variable Private
              69:             TypeArray 7(fvec4) 16
              70:             TypeStruct 69
              71:             TypePointer Uniform 70(struct)
              72:     71(ptr) Variable Uniform
              90:     15(int) Constant 1
              91:             TypeArray 6(float) 90
              92:             TypeStruct 7(fvec4) 6(float) 91
              93:             TypePointer Output 92(struct)
              94:     93(ptr) Variable Output
              99:             TypePointer Output 7(fvec4)
101(vs_TEXCOORD0):     99(ptr) Variable Output
             102:             TypePointer Input 7(fvec4)
             103:    102(ptr) Variable Input
105(vs_TEXCOORD1):     99(ptr) Variable Output
             106:    102(ptr) Variable Input
             108:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:   10(fvec3) Load 12
              14:   10(fvec3) VectorShuffle 13 13 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:   10(fvec3) VectorShuffle 29 29 0 1 2
              31:   10(fvec3) FMul 14 30
              32:    7(fvec4) Load 9
              33:    7(fvec4) VectorShuffle 32 31 4 5 6 3
                              Store 9 33
              34:     27(ptr) AccessChain 23 25 25
              35:    7(fvec4) Load 34
              36:   10(fvec3) VectorShuffle 35 35 0 1 2
              37:   10(fvec3) Load 12
              38:   10(fvec3) VectorShuffle 37 37 0 0 0
              39:   10(fvec3) FMul 36 38
              40:    7(fvec4) Load 9
              41:   10(fvec3) VectorShuffle 40 40 0 1 2
              42:   10(fvec3) FAdd 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) VectorShuffle 43 42 4 5 6 3
                              Store 9 44
              46:     27(ptr) AccessChain 23 25 45
              47:    7(fvec4) Load 46
              48:   10(fvec3) VectorShuffle 47 47 0 1 2
              49:   10(fvec3) Load 12
              50:   10(fvec3) VectorShuffle 49 49 2 2 2
              51:   10(fvec3) FMul 48 50
              52:    7(fvec4) Load 9
              53:   10(fvec3) VectorShuffle 52 52 0 1 2
              54:   10(fvec3) FAdd 51 53
              55:    7(fvec4) Load 9
              56:    7(fvec4) VectorShuffle 55 54 4 5 6 3
                              Store 9 56
              57:    7(fvec4) Load 9
              58:   10(fvec3) VectorShuffle 57 57 0 1 2
              60:     27(ptr) AccessChain 23 25 59
              61:    7(fvec4) Load 60
              62:   10(fvec3) VectorShuffle 61 61 0 1 2
              63:   10(fvec3) FAdd 58 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 63 4 5 6 3
                              Store 9 65
              67:    7(fvec4) Load 9
              68:    7(fvec4) VectorShuffle 67 67 1 1 1 1
              73:     27(ptr) AccessChain 72 25 26
              74:    7(fvec4) Load 73
              75:    7(fvec4) FMul 68 74
                              Store 66 75
              76:     27(ptr) AccessChain 72 25 25
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 9
              79:    7(fvec4) VectorShuffle 78 78 0 0 0 0
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 66
              82:    7(fvec4) FAdd 80 81
                              Store 66 82
              83:     27(ptr) AccessChain 72 25 45
              84:    7(fvec4) Load 83
              85:    7(fvec4) Load 9
              86:    7(fvec4) VectorShuffle 85 85 2 2 2 2
              87:    7(fvec4) FMul 84 86
              88:    7(fvec4) Load 66
              89:    7(fvec4) FAdd 87 88
                              Store 9 89
              95:    7(fvec4) Load 9
              96:     27(ptr) AccessChain 72 25 59
              97:    7(fvec4) Load 96
              98:    7(fvec4) FAdd 95 97
             100:     99(ptr) AccessChain 94 25
                              Store 100 98
             104:    7(fvec4) Load 103
                              Store 101(vs_TEXCOORD0) 104
             107:    7(fvec4) Load 106
                              Store 105(vs_TEXCOORD1) 107
             109:    108(ptr) AccessChain 94 25 90
             110:    6(float) Load 109
             111:    6(float) FNegate 110
             112:    108(ptr) AccessChain 94 25 90
                              Store 112 111
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 130

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 12 88 121
                              ExecutionMode 4 OriginUpperLeft
                              Name 12  "vs_TEXCOORD0"
                              Name 88  "vs_TEXCOORD1"
                              Decorate 12(vs_TEXCOORD0) Location 0
                              MemberDecorate 16 0 Offset 0
                              MemberDecorate 16 1 Offset 16
                              MemberDecorate 16 2 Offset 24
                              MemberDecorate 16 3 Offset 32
                              Decorate 16 Block
                              Decorate 18 DescriptorSet 1
                              Decorate 18 Binding 1
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 48 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 51 DescriptorSet 0
                              Decorate 51 Binding 5
                              Decorate 52 RelaxedPrecision
                              Decorate 55 RelaxedPrecision
                              Decorate 55 DescriptorSet 0
                              Decorate 55 Binding 2
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 65 RelaxedPrecision
                              Decorate 66 RelaxedPrecision
                              Decorate 72 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 73 DescriptorSet 0
                              Decorate 73 Binding 3
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 75 DescriptorSet 0
                              Decorate 75 Binding 0
                              Decorate 76 RelaxedPrecision
                              Decorate 81 RelaxedPrecision
                              Decorate 82 RelaxedPrecision
                              Decorate 88(vs_TEXCOORD1) Location 1
                              Decorate 99 RelaxedPrecision
                              Decorate 100 RelaxedPrecision
                              Decorate 100 DescriptorSet 0
                              Decorate 100 Binding 4
                              Decorate 101 RelaxedPrecision
                              Decorate 102 RelaxedPrecision
                              Decorate 102 DescriptorSet 0
                              Decorate 102 Binding 1
                              Decorate 103 RelaxedPrecision
                              Decorate 108 RelaxedPrecision
                              Decorate 110 RelaxedPrecision
                              Decorate 112 RelaxedPrecision
                              Decorate 113 RelaxedPrecision
                              Decorate 115 RelaxedPrecision
                              Decorate 118 RelaxedPrecision
                              Decorate 121 RelaxedPrecision
                              Decorate 121 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypePointer Input 10(fvec4)
12(vs_TEXCOORD0):     11(ptr) Variable Input
              13:             TypeVector 6(float) 2
              16:             TypeStruct 10(fvec4) 6(float) 13(fvec2) 13(fvec2)
              17:             TypePointer Uniform 16(struct)
              18:     17(ptr) Variable Uniform
              19:             TypeInt 32 1
              20:     19(int) Constant 3
              21:             TypePointer Uniform 13(fvec2)
              27:             TypePointer Private 13(fvec2)
              28:     27(ptr) Variable Private
              29:             TypeStruct 10(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:     19(int) Constant 0
              33:             TypePointer Uniform 10(fvec4)
              37:     19(int) Constant 2
              38:             TypeInt 32 0
              39:     38(int) Constant 0
              40:             TypePointer Uniform 6(float)
              43:     38(int) Constant 1
              48:      8(ptr) Variable Private
              49:             TypeImage 6(float) 2D sampled format:Unknown
              50:             TypePointer UniformConstant 49
              51:     50(ptr) Variable UniformConstant
              53:             TypeSampler
              54:             TypePointer UniformConstant 53
              55:     54(ptr) Variable UniformConstant
              57:             TypeSampledImage 49
              72:      8(ptr) Variable Private
              73:     50(ptr) Variable UniformConstant
              75:     54(ptr) Variable UniformConstant
              87:      8(ptr) Variable Private
88(vs_TEXCOORD1):     11(ptr) Variable Input
              91:     19(int) Constant 1
              99:      8(ptr) Variable Private
             100:     50(ptr) Variable UniformConstant
             102:     54(ptr) Variable UniformConstant
             120:             TypePointer Output 10(fvec4)
             121:    120(ptr) Variable Output
             125:    6(float) Constant 1065353216
             126:     38(int) Constant 3
             127:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:   10(fvec4) Load 12(vs_TEXCOORD0)
              15:   13(fvec2) VectorShuffle 14 14 0 1
              22:     21(ptr) AccessChain 18 20
              23:   13(fvec2) Load 22
              24:   13(fvec2) FMul 15 23
              25:    7(fvec3) Load 9
              26:    7(fvec3) VectorShuffle 25 24 3 4 2
                              Store 9 26
              34:     33(ptr) AccessChain 31 32
              35:   10(fvec4) Load 34
              36:   13(fvec2) VectorShuffle 35 35 0 0
              41:     40(ptr) AccessChain 18 37 39
              42:    6(float) Load 41
              44:     40(ptr) AccessChain 18 37 43
              45:    6(float) Load 44
              46:   13(fvec2) CompositeConstruct 42 45
              47:   13(fvec2) FMul 36 46
                              Store 28 47
              52:          49 Load 51
              56:          53 Load 55
              58:          57 SampledImage 52 56
              59:   10(fvec4) Load 12(vs_TEXCOORD0)
              60:   13(fvec2) VectorShuffle 59 59 0 1
              61:   10(fvec4) ImageSampleImplicitLod 58 60
              62:    7(fvec3) VectorShuffle 61 61 0 1 2
                              Store 48 62
              63:    7(fvec3) Load 9
              64:   13(fvec2) VectorShuffle 63 63 0 1
              65:    7(fvec3) Load 48
              66:   13(fvec2) VectorShuffle 65 65 0 1
              67:   13(fvec2) FMul 64 66
              68:   13(fvec2) Load 28
              69:   13(fvec2) FAdd 67 68
              70:    7(fvec3) Load 9
              71:    7(fvec3) VectorShuffle 70 69 3 4 2
                              Store 9 71
              74:          49 Load 73
              76:          53 Load 75
              77:          57 SampledImage 74 76
              78:    7(fvec3) Load 9
              79:   13(fvec2) VectorShuffle 78 78 0 1
              80:   10(fvec4) ImageSampleImplicitLod 77 79
              81:    7(fvec3) VectorShuffle 80 80 0 1 2
                              Store 72 81
              82:    7(fvec3) Load 72
              83:     33(ptr) AccessChain 18 32
              84:   10(fvec4) Load 83
              85:    7(fvec3) VectorShuffle 84 84 0 1 2
              86:    7(fvec3) FMul 82 85
                              Store 9 86
              89:   10(fvec4) Load 88(vs_TEXCOORD1)
              90:    7(fvec3) VectorShuffle 89 89 0 1 2
              92:     40(ptr) AccessChain 18 91
              93:    6(float) Load 92
              94:    7(fvec3) CompositeConstruct 93 93 93
              95:    7(fvec3) FMul 90 94
                              Store 87 95
              96:    7(fvec3) Load 9
              97:    7(fvec3) Load 87
              98:    7(fvec3) FMul 96 97
                              Store 9 98
             101:          49 Load 100
             103:          53 Load 102
             104:          57 SampledImage 101 103
             105:   10(fvec4) Load 12(vs_TEXCOORD0)
             106:   13(fvec2) VectorShuffle 105 105 0 1
             107:   10(fvec4) ImageSampleImplicitLod 104 106
             108:    7(fvec3) VectorShuffle 107 107 0 1 2
                              Store 99 108
             109:    7(fvec3) Load 9
             110:    7(fvec3) Load 99
             111:    7(fvec3) FMul 109 110
             112:    7(fvec3) Load 99
             113:    7(fvec3) FNegate 112
             114:    7(fvec3) FAdd 111 113
                              Store 9 114
             115:    7(fvec3) Load 48
             116:    7(fvec3) Load 9
             117:    7(fvec3) FMul 115 116
             118:    7(fvec3) Load 99
             119:    7(fvec3) FAdd 117 118
                              Store 9 119
             122:    7(fvec3) Load 9
             123:   10(fvec4) Load 121
             124:   10(fvec4) VectorShuffle 123 122 4 5 6 3
                              Store 121 124
             128:    127(ptr) AccessChain 121 126
                              Store 128 125
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 10 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
// SV_InstanceID            0   x           5   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint   x   
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[1349], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[12], dynamicIndexed
      dcl_input v0.xyz
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_input_sgv v5.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.x
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_temps 2
   0: iadd r0.x, v5.x, cb1[0].x
   1: ishl r0.x, r0.x, l(3)
   2: mul r0.yzw, v0.yyyy, cb2[r0.x + 1].xxyz
   3: mad r0.yzw, cb2[r0.x + 0].xxyz, v0.xxxx, r0.yyzw
   4: mad r0.yzw, cb2[r0.x + 2].xxyz, v0.zzzz, r0.yyzw
   5: add r0.xyz, r0.yzwy, cb2[r0.x + 3].xyzx
   6: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
   7: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
   8: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
   9: add o0.xyzw, r0.xyzw, cb0[1348].xyzw
  10: mov o1.x, v5.x
  11: mov o2.xyzw, v3.xyzw
  12: mov o3.xyzw, v4.xyzw
  13: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 8 math, 3 temp registers, 3 textures
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Vector4 _TimeParameters at 20704
}
Constant Buffer "UnityPerMaterial" (48 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 20
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint       
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1295], immediateIndexed
      dcl_constantbuffer CB1[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v2.xy
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: mul r0.xy, v2.xyxx, cb1[2].xyxx
   1: mul r0.zw, cb0[1294].xxxx, cb1[1].yyyz
   2: sample r1.xyzw, v2.xyxx, t2.xyzw, s2
   3: mad r0.xy, r0.xyxx, r1.xyxx, r0.zwzz
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mul r0.xyz, r0.xyzx, cb1[0].xyzx
   6: mul r2.xyz, v3.xyzx, cb1[1].xxxx
   7: mul r0.xyz, r0.xyzx, r2.xyzx
   8: sample r2.xyzw, v2.xyxx, t1.xyzw, s1
   9: mad r0.xyz, r0.xyzx, r2.xyzx, -r2.xyzx
  10: mad o0.xyz, r1.xyzx, r0.xyzx, r2.xyzx
  11: mov o0.w, l(1.000000)
  12: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (68 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 331 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
flat out highp uint vs_CUSTOM_INSTANCE_ID0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat2.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 Color_C8B04CD6;
	UNITY_UNIFORM float Vector1_BEE363EB;
	UNITY_UNIFORM vec2 Vector2_A455A09;
	UNITY_UNIFORM vec2 Vector2_CE5DC7AB;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform mediump sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform mediump sampler2D Texture2D_8FF63723;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat16_1.xyz = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xy = u_xlat0.xy * u_xlat16_1.xy + u_xlat6.xy;
    u_xlat16_0.xyz = texture(Texture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat16_2.xyz = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "VGlobals" (64 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    uint CUSTOM_INSTANCE_ID0 [[ user(CUSTOM_INSTANCE_ID0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float3 u_xlat2;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat2.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = u_xlat2.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.CUSTOM_INSTANCE_ID0 = mtl_InstanceID;
    output.TEXCOORD0 = input.TEXCOORD0;
    output.TEXCOORD1 = input.COLOR0;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _TimeParameters;
};

struct UnityPerMaterial_Type
{
    float4 Color_C8B04CD6;
    float Vector1_BEE363EB;
    float2 Vector2_A455A09;
    float2 Vector2_CE5DC7AB;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler samplerTexture2D_B857C0CC [[ sampler (0) ]],
    sampler samplerTexture2D_CAC5E1DB [[ sampler (1) ]],
    sampler samplerTexture2D_8FF63723 [[ sampler (2) ]],
    texture2d<float, access::sample > Texture2D_B857C0CC [[ texture(0) ]] ,
    texture2d<float, access::sample > Texture2D_CAC5E1DB [[ texture(1) ]] ,
    texture2d<float, access::sample > Texture2D_8FF63723 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float2 u_xlat6;
    u_xlat0.xy = input.TEXCOORD0.xy * UnityPerMaterial.Vector2_CE5DC7AB.xyxx.xy;
    u_xlat6.xy = FGlobals._TimeParameters.xx * UnityPerMaterial.Vector2_A455A09.xxyx.yz;
    u_xlat1.xyz = Texture2D_8FF63723.sample(samplerTexture2D_8FF63723, input.TEXCOORD0.xy).xyz;
    u_xlat0.xy = fma(u_xlat0.xy, u_xlat1.xy, u_xlat6.xy);
    u_xlat0.xyz = Texture2D_B857C0CC.sample(samplerTexture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * UnityPerMaterial.Color_C8B04CD6.xyz;
    u_xlat2.xyz = input.TEXCOORD1.xyz * float3(UnityPerMaterial.Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = Texture2D_CAC5E1DB.sample(samplerTexture2D_CAC5E1DB, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat2.xyz));
    output.SV_TARGET0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat2.xyz);
    output.SV_TARGET0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (68 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 331 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec3 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
flat out uint vs_CUSTOM_INSTANCE_ID0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
UNITY_BINDING(0) uniform UnityPerMaterial {
	vec4 Color_C8B04CD6;
	float Vector1_BEE363EB;
	vec2 Vector2_A455A09;
	vec2 Vector2_CE5DC7AB;
};
UNITY_LOCATION(0) uniform  sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform  sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform  sampler2D Texture2D_8FF63723;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_TARGET0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat10_1 = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat0.xy * u_xlat10_1.xy + u_xlat6.xy;
    u_xlat10_0 = texture(Texture2D_B857C0CC, u_xlat0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat10_2 = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_2.xyz + (-u_xlat10_2.xyz);
    SV_TARGET0.xyz = u_xlat10_1.xyz * u_xlat0.xyz + u_xlat10_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Set 2D Texture "Texture2D_8FF63723" to set: 0, binding: 5, used in: Fragment  using sampler in set: 0, binding: 2, used in: Fragment 
Set 2D Texture "Texture2D_B857C0CC" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 
Set 2D Texture "Texture2D_CAC5E1DB" to set: 0, binding: 4, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals4197363630" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 3, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 4, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
  }
}
Constant Buffer "UnityPerMaterial" (40 bytes) on set: 1, binding: 1, used in: Fragment  {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "VGlobals4197363630" (64 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 135

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 28 111 119 122 124 126 127
                              Name 122  "vs_TEXCOORD0"
                              Name 126  "vs_TEXCOORD1"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 3
                              Decorate 28 Location 0
                              Decorate 34 ArrayStride 16
                              Decorate 35 ArrayStride 16
                              MemberDecorate 36 0 Offset 0
                              MemberDecorate 36 1 Offset 64
                              Decorate 37 SpecId 0
                              Decorate 38 ArrayStride 128
                              MemberDecorate 39 0 Offset 0
                              Decorate 39 Block
                              Decorate 41 DescriptorSet 1
                              Decorate 41 Binding 4
                              Decorate 86 ArrayStride 16
                              MemberDecorate 87 0 Offset 0
                              Decorate 87 Block
                              Decorate 89 DescriptorSet 1
                              Decorate 89 Binding 2
                              MemberDecorate 109 0 BuiltIn Position
                              MemberDecorate 109 1 BuiltIn PointSize
                              MemberDecorate 109 2 BuiltIn ClipDistance
                              Decorate 109 Block
                              Decorate 119 Flat
                              Decorate 119 Location 2
                              Decorate 122(vs_TEXCOORD0) Location 0
                              Decorate 124 Location 1
                              Decorate 126(vs_TEXCOORD1) Location 1
                              Decorate 127 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              21:      6(int) Constant 3
              23:             TypeFloat 32
              24:             TypeVector 23(float) 3
              25:             TypePointer Private 24(fvec3)
              26:     25(ptr) Variable Private
              27:             TypePointer Input 24(fvec3)
              28:     27(ptr) Variable Input
              31:             TypeVector 23(float) 4
              32:             TypeInt 32 0
              33:     32(int) Constant 4
              34:             TypeArray 31(fvec4) 33
              35:             TypeArray 31(fvec4) 33
              36:             TypeStruct 34 35
              37:      6(int) SpecConstant 2
              38:             TypeArray 36(struct) 37
              39:             TypeStruct 38
              40:             TypePointer Uniform 39(struct)
              41:     40(ptr) Variable Uniform
              43:      6(int) Constant 8
              45:      6(int) Constant 1
              46:             TypePointer Uniform 31(fvec4)
              63:      6(int) Constant 2
              72:             TypePointer Private 31(fvec4)
              73:     72(ptr) Variable Private
              83:     72(ptr) Variable Private
              86:             TypeArray 31(fvec4) 33
              87:             TypeStruct 86
              88:             TypePointer Uniform 87(struct)
              89:     88(ptr) Variable Uniform
             107:     32(int) Constant 1
             108:             TypeArray 23(float) 107
             109:             TypeStruct 31(fvec4) 23(float) 108
             110:             TypePointer Output 109(struct)
             111:    110(ptr) Variable Output
             116:             TypePointer Output 31(fvec4)
             118:             TypePointer Output 32(int)
             119:    118(ptr) Variable Output
122(vs_TEXCOORD0):    116(ptr) Variable Output
             123:             TypePointer Input 31(fvec4)
             124:    123(ptr) Variable Input
126(vs_TEXCOORD1):    116(ptr) Variable Output
             127:    123(ptr) Variable Input
             129:             TypePointer Output 23(float)
               4:           2 Function None 3
               5:             Label
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              20:      6(int) Load 8
              22:      6(int) ShiftLeftLogical 20 21
                              Store 8 22
              29:   24(fvec3) Load 28
              30:   24(fvec3) VectorShuffle 29 29 1 1 1
              42:      6(int) Load 8
              44:      6(int) SDiv 42 43
              47:     46(ptr) AccessChain 41 15 44 15 45
              48:   31(fvec4) Load 47
              49:   24(fvec3) VectorShuffle 48 48 0 1 2
              50:   24(fvec3) FMul 30 49
                              Store 26 50
              51:      6(int) Load 8
              52:      6(int) SDiv 51 43
              53:     46(ptr) AccessChain 41 15 52 15 15
              54:   31(fvec4) Load 53
              55:   24(fvec3) VectorShuffle 54 54 0 1 2
              56:   24(fvec3) Load 28
              57:   24(fvec3) VectorShuffle 56 56 0 0 0
              58:   24(fvec3) FMul 55 57
              59:   24(fvec3) Load 26
              60:   24(fvec3) FAdd 58 59
                              Store 26 60
              61:      6(int) Load 8
              62:      6(int) SDiv 61 43
              64:     46(ptr) AccessChain 41 15 62 15 63
              65:   31(fvec4) Load 64
              66:   24(fvec3) VectorShuffle 65 65 0 1 2
              67:   24(fvec3) Load 28
              68:   24(fvec3) VectorShuffle 67 67 2 2 2
              69:   24(fvec3) FMul 66 68
              70:   24(fvec3) Load 26
              71:   24(fvec3) FAdd 69 70
                              Store 26 71
              74:   24(fvec3) Load 26
              75:      6(int) Load 8
              76:      6(int) SDiv 75 43
              77:     46(ptr) AccessChain 41 15 76 15 21
              78:   31(fvec4) Load 77
              79:   24(fvec3) VectorShuffle 78 78 0 1 2
              80:   24(fvec3) FAdd 74 79
              81:   31(fvec4) Load 73
              82:   31(fvec4) VectorShuffle 81 80 4 5 6 3
                              Store 73 82
              84:   31(fvec4) Load 73
              85:   31(fvec4) VectorShuffle 84 84 1 1 1 1
              90:     46(ptr) AccessChain 89 15 45
              91:   31(fvec4) Load 90
              92:   31(fvec4) FMul 85 91
                              Store 83 92
              93:     46(ptr) AccessChain 89 15 15
              94:   31(fvec4) Load 93
              95:   31(fvec4) Load 73
              96:   31(fvec4) VectorShuffle 95 95 0 0 0 0
              97:   31(fvec4) FMul 94 96
              98:   31(fvec4) Load 83
              99:   31(fvec4) FAdd 97 98
                              Store 83 99
             100:     46(ptr) AccessChain 89 15 63
             101:   31(fvec4) Load 100
             102:   31(fvec4) Load 73
             103:   31(fvec4) VectorShuffle 102 102 2 2 2 2
             104:   31(fvec4) FMul 101 103
             105:   31(fvec4) Load 83
             106:   31(fvec4) FAdd 104 105
                              Store 73 106
             112:   31(fvec4) Load 73
             113:     46(ptr) AccessChain 89 15 21
             114:   31(fvec4) Load 113
             115:   31(fvec4) FAdd 112 114
             117:    116(ptr) AccessChain 111 15
                              Store 117 115
             120:      6(int) Load 10
             121:     32(int) Bitcast 120
                              Store 119 121
             125:   31(fvec4) Load 124
                              Store 122(vs_TEXCOORD0) 125
             128:   31(fvec4) Load 127
                              Store 126(vs_TEXCOORD1) 128
             130:    129(ptr) AccessChain 111 15 107
             131:   23(float) Load 130
             132:   23(float) FNegate 131
             133:    129(ptr) AccessChain 111 15 107
                              Store 133 132
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 130

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 12 88 121
                              ExecutionMode 4 OriginUpperLeft
                              Name 12  "vs_TEXCOORD0"
                              Name 88  "vs_TEXCOORD1"
                              Decorate 12(vs_TEXCOORD0) Location 0
                              MemberDecorate 16 0 Offset 0
                              MemberDecorate 16 1 Offset 16
                              MemberDecorate 16 2 Offset 24
                              MemberDecorate 16 3 Offset 32
                              Decorate 16 Block
                              Decorate 18 DescriptorSet 1
                              Decorate 18 Binding 1
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 48 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 51 DescriptorSet 0
                              Decorate 51 Binding 5
                              Decorate 52 RelaxedPrecision
                              Decorate 55 RelaxedPrecision
                              Decorate 55 DescriptorSet 0
                              Decorate 55 Binding 2
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 65 RelaxedPrecision
                              Decorate 66 RelaxedPrecision
                              Decorate 72 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 73 DescriptorSet 0
                              Decorate 73 Binding 3
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 75 DescriptorSet 0
                              Decorate 75 Binding 0
                              Decorate 76 RelaxedPrecision
                              Decorate 81 RelaxedPrecision
                              Decorate 82 RelaxedPrecision
                              Decorate 88(vs_TEXCOORD1) Location 1
                              Decorate 99 RelaxedPrecision
                              Decorate 100 RelaxedPrecision
                              Decorate 100 DescriptorSet 0
                              Decorate 100 Binding 4
                              Decorate 101 RelaxedPrecision
                              Decorate 102 RelaxedPrecision
                              Decorate 102 DescriptorSet 0
                              Decorate 102 Binding 1
                              Decorate 103 RelaxedPrecision
                              Decorate 108 RelaxedPrecision
                              Decorate 110 RelaxedPrecision
                              Decorate 112 RelaxedPrecision
                              Decorate 113 RelaxedPrecision
                              Decorate 115 RelaxedPrecision
                              Decorate 118 RelaxedPrecision
                              Decorate 121 RelaxedPrecision
                              Decorate 121 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypePointer Input 10(fvec4)
12(vs_TEXCOORD0):     11(ptr) Variable Input
              13:             TypeVector 6(float) 2
              16:             TypeStruct 10(fvec4) 6(float) 13(fvec2) 13(fvec2)
              17:             TypePointer Uniform 16(struct)
              18:     17(ptr) Variable Uniform
              19:             TypeInt 32 1
              20:     19(int) Constant 3
              21:             TypePointer Uniform 13(fvec2)
              27:             TypePointer Private 13(fvec2)
              28:     27(ptr) Variable Private
              29:             TypeStruct 10(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:     19(int) Constant 0
              33:             TypePointer Uniform 10(fvec4)
              37:     19(int) Constant 2
              38:             TypeInt 32 0
              39:     38(int) Constant 0
              40:             TypePointer Uniform 6(float)
              43:     38(int) Constant 1
              48:      8(ptr) Variable Private
              49:             TypeImage 6(float) 2D sampled format:Unknown
              50:             TypePointer UniformConstant 49
              51:     50(ptr) Variable UniformConstant
              53:             TypeSampler
              54:             TypePointer UniformConstant 53
              55:     54(ptr) Variable UniformConstant
              57:             TypeSampledImage 49
              72:      8(ptr) Variable Private
              73:     50(ptr) Variable UniformConstant
              75:     54(ptr) Variable UniformConstant
              87:      8(ptr) Variable Private
88(vs_TEXCOORD1):     11(ptr) Variable Input
              91:     19(int) Constant 1
              99:      8(ptr) Variable Private
             100:     50(ptr) Variable UniformConstant
             102:     54(ptr) Variable UniformConstant
             120:             TypePointer Output 10(fvec4)
             121:    120(ptr) Variable Output
             125:    6(float) Constant 1065353216
             126:     38(int) Constant 3
             127:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:   10(fvec4) Load 12(vs_TEXCOORD0)
              15:   13(fvec2) VectorShuffle 14 14 0 1
              22:     21(ptr) AccessChain 18 20
              23:   13(fvec2) Load 22
              24:   13(fvec2) FMul 15 23
              25:    7(fvec3) Load 9
              26:    7(fvec3) VectorShuffle 25 24 3 4 2
                              Store 9 26
              34:     33(ptr) AccessChain 31 32
              35:   10(fvec4) Load 34
              36:   13(fvec2) VectorShuffle 35 35 0 0
              41:     40(ptr) AccessChain 18 37 39
              42:    6(float) Load 41
              44:     40(ptr) AccessChain 18 37 43
              45:    6(float) Load 44
              46:   13(fvec2) CompositeConstruct 42 45
              47:   13(fvec2) FMul 36 46
                              Store 28 47
              52:          49 Load 51
              56:          53 Load 55
              58:          57 SampledImage 52 56
              59:   10(fvec4) Load 12(vs_TEXCOORD0)
              60:   13(fvec2) VectorShuffle 59 59 0 1
              61:   10(fvec4) ImageSampleImplicitLod 58 60
              62:    7(fvec3) VectorShuffle 61 61 0 1 2
                              Store 48 62
              63:    7(fvec3) Load 9
              64:   13(fvec2) VectorShuffle 63 63 0 1
              65:    7(fvec3) Load 48
              66:   13(fvec2) VectorShuffle 65 65 0 1
              67:   13(fvec2) FMul 64 66
              68:   13(fvec2) Load 28
              69:   13(fvec2) FAdd 67 68
              70:    7(fvec3) Load 9
              71:    7(fvec3) VectorShuffle 70 69 3 4 2
                              Store 9 71
              74:          49 Load 73
              76:          53 Load 75
              77:          57 SampledImage 74 76
              78:    7(fvec3) Load 9
              79:   13(fvec2) VectorShuffle 78 78 0 1
              80:   10(fvec4) ImageSampleImplicitLod 77 79
              81:    7(fvec3) VectorShuffle 80 80 0 1 2
                              Store 72 81
              82:    7(fvec3) Load 72
              83:     33(ptr) AccessChain 18 32
              84:   10(fvec4) Load 83
              85:    7(fvec3) VectorShuffle 84 84 0 1 2
              86:    7(fvec3) FMul 82 85
                              Store 9 86
              89:   10(fvec4) Load 88(vs_TEXCOORD1)
              90:    7(fvec3) VectorShuffle 89 89 0 1 2
              92:     40(ptr) AccessChain 18 91
              93:    6(float) Load 92
              94:    7(fvec3) CompositeConstruct 93 93 93
              95:    7(fvec3) FMul 90 94
                              Store 87 95
              96:    7(fvec3) Load 9
              97:    7(fvec3) Load 87
              98:    7(fvec3) FMul 96 97
                              Store 9 98
             101:          49 Load 100
             103:          53 Load 102
             104:          57 SampledImage 101 103
             105:   10(fvec4) Load 12(vs_TEXCOORD0)
             106:   13(fvec2) VectorShuffle 105 105 0 1
             107:   10(fvec4) ImageSampleImplicitLod 104 106
             108:    7(fvec3) VectorShuffle 107 107 0 1 2
                              Store 99 108
             109:    7(fvec3) Load 9
             110:    7(fvec3) Load 99
             111:    7(fvec3) FMul 109 110
             112:    7(fvec3) Load 99
             113:    7(fvec3) FNegate 112
             114:    7(fvec3) FAdd 111 113
                              Store 9 114
             115:    7(fvec3) Load 48
             116:    7(fvec3) Load 9
             117:    7(fvec3) FMul 115 116
             118:    7(fvec3) Load 99
             119:    7(fvec3) FAdd 117 118
                              Store 9 119
             122:    7(fvec3) Load 9
             123:   10(fvec4) Load 121
             124:   10(fvec4) VectorShuffle 123 122 4 5 6 3
                              Store 121 124
             128:    127(ptr) AccessChain 121 126
                              Store 128 125
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 8 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[1349], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_temps 2
   0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
   1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
   2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   3: add r0.xyz, r0.xyzx, cb1[3].xyzx
   4: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
   5: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
   6: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
   7: add o0.xyzw, r0.xyzw, cb0[1348].xyzw
   8: mov o1.xyzw, v3.xyzw
   9: mov o2.xyzw, v4.xyzw
  10: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 8 math, 3 temp registers, 3 textures
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Vector4 _TimeParameters at 20704
}
Constant Buffer "UnityPerMaterial" (48 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 20
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1295], immediateIndexed
      dcl_constantbuffer CB1[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: mul r0.xy, v1.xyxx, cb1[2].xyxx
   1: mul r0.zw, cb0[1294].xxxx, cb1[1].yyyz
   2: sample r1.xyzw, v1.xyxx, t2.xyzw, s2
   3: mad r0.xy, r0.xyxx, r1.xyxx, r0.zwzz
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mul r0.xyz, r0.xyzx, cb1[0].xyzx
   6: mul r2.xyz, v2.xyzx, cb1[1].xxxx
   7: mul r0.xyz, r0.xyzx, r2.xyzx
   8: sample r2.xyzw, v1.xyxx, t1.xyzw, s1
   9: mad r0.xyz, r0.xyzx, r2.xyzx, -r2.xyzx
  10: mad o0.xyz, r1.xyzx, r0.xyzx, r2.xyzx
  11: mov o0.w, l(1.000000)
  12: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _TimeParameters;
uniform 	vec4 Color_C8B04CD6;
uniform 	float Vector1_BEE363EB;
uniform 	vec2 Vector2_A455A09;
uniform 	vec2 Vector2_CE5DC7AB;
uniform lowp sampler2D Texture2D_CAC5E1DB;
uniform lowp sampler2D Texture2D_8FF63723;
uniform lowp sampler2D Texture2D_B857C0CC;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat10_1.xyz = texture2D(Texture2D_8FF63723, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xy = u_xlat0.xy * u_xlat10_1.xy + u_xlat6.xy;
    u_xlat10_0.xyz = texture2D(Texture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat10_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat10_2.xyz = texture2D(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_2.xyz + (-u_xlat10_2.xyz);
    u_xlat0.xyz = u_xlat10_1.xyz * u_xlat0.xyz + u_xlat10_2.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (64 bytes) {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 Color_C8B04CD6;
	UNITY_UNIFORM float Vector1_BEE363EB;
	UNITY_UNIFORM vec2 Vector2_A455A09;
	UNITY_UNIFORM vec2 Vector2_CE5DC7AB;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform mediump sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform mediump sampler2D Texture2D_8FF63723;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat16_1.xyz = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xy = u_xlat0.xy * u_xlat16_1.xy + u_xlat6.xy;
    u_xlat16_0.xyz = texture(Texture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat16_2.xyz = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "VGlobals" (64 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_ProbesOcclusion;
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.TEXCOORD0 = input.TEXCOORD0;
    output.TEXCOORD1 = input.COLOR0;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _TimeParameters;
};

struct UnityPerMaterial_Type
{
    float4 Color_C8B04CD6;
    float Vector1_BEE363EB;
    float2 Vector2_A455A09;
    float2 Vector2_CE5DC7AB;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler samplerTexture2D_B857C0CC [[ sampler (0) ]],
    sampler samplerTexture2D_CAC5E1DB [[ sampler (1) ]],
    sampler samplerTexture2D_8FF63723 [[ sampler (2) ]],
    texture2d<float, access::sample > Texture2D_B857C0CC [[ texture(0) ]] ,
    texture2d<float, access::sample > Texture2D_CAC5E1DB [[ texture(1) ]] ,
    texture2d<float, access::sample > Texture2D_8FF63723 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float2 u_xlat6;
    u_xlat0.xy = input.TEXCOORD0.xy * UnityPerMaterial.Vector2_CE5DC7AB.xyxx.xy;
    u_xlat6.xy = FGlobals._TimeParameters.xx * UnityPerMaterial.Vector2_A455A09.xxyx.yz;
    u_xlat1.xyz = Texture2D_8FF63723.sample(samplerTexture2D_8FF63723, input.TEXCOORD0.xy).xyz;
    u_xlat0.xy = fma(u_xlat0.xy, u_xlat1.xy, u_xlat6.xy);
    u_xlat0.xyz = Texture2D_B857C0CC.sample(samplerTexture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * UnityPerMaterial.Color_C8B04CD6.xyz;
    u_xlat2.xyz = input.TEXCOORD1.xyz * float3(UnityPerMaterial.Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = Texture2D_CAC5E1DB.sample(samplerTexture2D_CAC5E1DB, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat2.xyz));
    output.SV_TARGET0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat2.xyz);
    output.SV_TARGET0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (64 bytes) {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
UNITY_BINDING(1) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
in  vec3 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
UNITY_BINDING(0) uniform UnityPerMaterial {
	vec4 Color_C8B04CD6;
	float Vector1_BEE363EB;
	vec2 Vector2_A455A09;
	vec2 Vector2_CE5DC7AB;
};
UNITY_LOCATION(0) uniform  sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform  sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform  sampler2D Texture2D_8FF63723;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_TARGET0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat10_1 = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat0.xy * u_xlat10_1.xy + u_xlat6.xy;
    u_xlat10_0 = texture(Texture2D_B857C0CC, u_xlat0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat10_2 = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_2.xyz + (-u_xlat10_2.xyz);
    SV_TARGET0.xyz = u_xlat10_1.xyz * u_xlat0.xyz + u_xlat10_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Set 2D Texture "Texture2D_8FF63723" to set: 0, binding: 5, used in: Fragment  using sampler in set: 0, binding: 2, used in: Fragment 
Set 2D Texture "Texture2D_B857C0CC" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 
Set 2D Texture "Texture2D_CAC5E1DB" to set: 0, binding: 4, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals2529311593" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on set: 1, binding: 3, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on set: 1, binding: 1, used in: Fragment  {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "VGlobals2529311593" (64 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 114

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 12 94 101 103 105 106
                              Name 101  "vs_TEXCOORD0"
                              Name 105  "vs_TEXCOORD1"
                              Decorate 12 Location 0
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 64
                              MemberDecorate 21 2 Offset 128
                              MemberDecorate 21 3 RelaxedPrecision
                              MemberDecorate 21 3 Offset 144
                              MemberDecorate 21 4 RelaxedPrecision
                              MemberDecorate 21 4 Offset 160
                              MemberDecorate 21 5 RelaxedPrecision
                              MemberDecorate 21 5 Offset 176
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 RelaxedPrecision
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 RelaxedPrecision
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 RelaxedPrecision
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 RelaxedPrecision
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 RelaxedPrecision
                              MemberDecorate 21 13 Offset 320
                              MemberDecorate 21 14 RelaxedPrecision
                              MemberDecorate 21 14 Offset 336
                              MemberDecorate 21 15 RelaxedPrecision
                              MemberDecorate 21 15 Offset 352
                              MemberDecorate 21 16 RelaxedPrecision
                              MemberDecorate 21 16 Offset 368
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 3
                              Decorate 69 ArrayStride 16
                              MemberDecorate 70 0 Offset 0
                              Decorate 70 Block
                              Decorate 72 DescriptorSet 1
                              Decorate 72 Binding 2
                              MemberDecorate 92 0 BuiltIn Position
                              MemberDecorate 92 1 BuiltIn PointSize
                              MemberDecorate 92 2 BuiltIn ClipDistance
                              Decorate 92 Block
                              Decorate 101(vs_TEXCOORD0) Location 0
                              Decorate 103 Location 1
                              Decorate 105(vs_TEXCOORD1) Location 1
                              Decorate 106 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:     15(int) Constant 2
              20:             TypeArray 7(fvec4) 19
              21:             TypeStruct 17 18 7(fvec4) 7(fvec4) 7(fvec4) 20 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 0
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              45:     24(int) Constant 2
              59:     24(int) Constant 3
              66:      8(ptr) Variable Private
              69:             TypeArray 7(fvec4) 16
              70:             TypeStruct 69
              71:             TypePointer Uniform 70(struct)
              72:     71(ptr) Variable Uniform
              90:     15(int) Constant 1
              91:             TypeArray 6(float) 90
              92:             TypeStruct 7(fvec4) 6(float) 91
              93:             TypePointer Output 92(struct)
              94:     93(ptr) Variable Output
              99:             TypePointer Output 7(fvec4)
101(vs_TEXCOORD0):     99(ptr) Variable Output
             102:             TypePointer Input 7(fvec4)
             103:    102(ptr) Variable Input
105(vs_TEXCOORD1):     99(ptr) Variable Output
             106:    102(ptr) Variable Input
             108:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:   10(fvec3) Load 12
              14:   10(fvec3) VectorShuffle 13 13 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:   10(fvec3) VectorShuffle 29 29 0 1 2
              31:   10(fvec3) FMul 14 30
              32:    7(fvec4) Load 9
              33:    7(fvec4) VectorShuffle 32 31 4 5 6 3
                              Store 9 33
              34:     27(ptr) AccessChain 23 25 25
              35:    7(fvec4) Load 34
              36:   10(fvec3) VectorShuffle 35 35 0 1 2
              37:   10(fvec3) Load 12
              38:   10(fvec3) VectorShuffle 37 37 0 0 0
              39:   10(fvec3) FMul 36 38
              40:    7(fvec4) Load 9
              41:   10(fvec3) VectorShuffle 40 40 0 1 2
              42:   10(fvec3) FAdd 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) VectorShuffle 43 42 4 5 6 3
                              Store 9 44
              46:     27(ptr) AccessChain 23 25 45
              47:    7(fvec4) Load 46
              48:   10(fvec3) VectorShuffle 47 47 0 1 2
              49:   10(fvec3) Load 12
              50:   10(fvec3) VectorShuffle 49 49 2 2 2
              51:   10(fvec3) FMul 48 50
              52:    7(fvec4) Load 9
              53:   10(fvec3) VectorShuffle 52 52 0 1 2
              54:   10(fvec3) FAdd 51 53
              55:    7(fvec4) Load 9
              56:    7(fvec4) VectorShuffle 55 54 4 5 6 3
                              Store 9 56
              57:    7(fvec4) Load 9
              58:   10(fvec3) VectorShuffle 57 57 0 1 2
              60:     27(ptr) AccessChain 23 25 59
              61:    7(fvec4) Load 60
              62:   10(fvec3) VectorShuffle 61 61 0 1 2
              63:   10(fvec3) FAdd 58 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 63 4 5 6 3
                              Store 9 65
              67:    7(fvec4) Load 9
              68:    7(fvec4) VectorShuffle 67 67 1 1 1 1
              73:     27(ptr) AccessChain 72 25 26
              74:    7(fvec4) Load 73
              75:    7(fvec4) FMul 68 74
                              Store 66 75
              76:     27(ptr) AccessChain 72 25 25
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 9
              79:    7(fvec4) VectorShuffle 78 78 0 0 0 0
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 66
              82:    7(fvec4) FAdd 80 81
                              Store 66 82
              83:     27(ptr) AccessChain 72 25 45
              84:    7(fvec4) Load 83
              85:    7(fvec4) Load 9
              86:    7(fvec4) VectorShuffle 85 85 2 2 2 2
              87:    7(fvec4) FMul 84 86
              88:    7(fvec4) Load 66
              89:    7(fvec4) FAdd 87 88
                              Store 9 89
              95:    7(fvec4) Load 9
              96:     27(ptr) AccessChain 72 25 59
              97:    7(fvec4) Load 96
              98:    7(fvec4) FAdd 95 97
             100:     99(ptr) AccessChain 94 25
                              Store 100 98
             104:    7(fvec4) Load 103
                              Store 101(vs_TEXCOORD0) 104
             107:    7(fvec4) Load 106
                              Store 105(vs_TEXCOORD1) 107
             109:    108(ptr) AccessChain 94 25 90
             110:    6(float) Load 109
             111:    6(float) FNegate 110
             112:    108(ptr) AccessChain 94 25 90
                              Store 112 111
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 130

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 12 88 121
                              ExecutionMode 4 OriginUpperLeft
                              Name 12  "vs_TEXCOORD0"
                              Name 88  "vs_TEXCOORD1"
                              Decorate 12(vs_TEXCOORD0) Location 0
                              MemberDecorate 16 0 Offset 0
                              MemberDecorate 16 1 Offset 16
                              MemberDecorate 16 2 Offset 24
                              MemberDecorate 16 3 Offset 32
                              Decorate 16 Block
                              Decorate 18 DescriptorSet 1
                              Decorate 18 Binding 1
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 48 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 51 DescriptorSet 0
                              Decorate 51 Binding 5
                              Decorate 52 RelaxedPrecision
                              Decorate 55 RelaxedPrecision
                              Decorate 55 DescriptorSet 0
                              Decorate 55 Binding 2
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 65 RelaxedPrecision
                              Decorate 66 RelaxedPrecision
                              Decorate 72 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 73 DescriptorSet 0
                              Decorate 73 Binding 3
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 75 DescriptorSet 0
                              Decorate 75 Binding 0
                              Decorate 76 RelaxedPrecision
                              Decorate 81 RelaxedPrecision
                              Decorate 82 RelaxedPrecision
                              Decorate 88(vs_TEXCOORD1) Location 1
                              Decorate 99 RelaxedPrecision
                              Decorate 100 RelaxedPrecision
                              Decorate 100 DescriptorSet 0
                              Decorate 100 Binding 4
                              Decorate 101 RelaxedPrecision
                              Decorate 102 RelaxedPrecision
                              Decorate 102 DescriptorSet 0
                              Decorate 102 Binding 1
                              Decorate 103 RelaxedPrecision
                              Decorate 108 RelaxedPrecision
                              Decorate 110 RelaxedPrecision
                              Decorate 112 RelaxedPrecision
                              Decorate 113 RelaxedPrecision
                              Decorate 115 RelaxedPrecision
                              Decorate 118 RelaxedPrecision
                              Decorate 121 RelaxedPrecision
                              Decorate 121 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypePointer Input 10(fvec4)
12(vs_TEXCOORD0):     11(ptr) Variable Input
              13:             TypeVector 6(float) 2
              16:             TypeStruct 10(fvec4) 6(float) 13(fvec2) 13(fvec2)
              17:             TypePointer Uniform 16(struct)
              18:     17(ptr) Variable Uniform
              19:             TypeInt 32 1
              20:     19(int) Constant 3
              21:             TypePointer Uniform 13(fvec2)
              27:             TypePointer Private 13(fvec2)
              28:     27(ptr) Variable Private
              29:             TypeStruct 10(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:     19(int) Constant 0
              33:             TypePointer Uniform 10(fvec4)
              37:     19(int) Constant 2
              38:             TypeInt 32 0
              39:     38(int) Constant 0
              40:             TypePointer Uniform 6(float)
              43:     38(int) Constant 1
              48:      8(ptr) Variable Private
              49:             TypeImage 6(float) 2D sampled format:Unknown
              50:             TypePointer UniformConstant 49
              51:     50(ptr) Variable UniformConstant
              53:             TypeSampler
              54:             TypePointer UniformConstant 53
              55:     54(ptr) Variable UniformConstant
              57:             TypeSampledImage 49
              72:      8(ptr) Variable Private
              73:     50(ptr) Variable UniformConstant
              75:     54(ptr) Variable UniformConstant
              87:      8(ptr) Variable Private
88(vs_TEXCOORD1):     11(ptr) Variable Input
              91:     19(int) Constant 1
              99:      8(ptr) Variable Private
             100:     50(ptr) Variable UniformConstant
             102:     54(ptr) Variable UniformConstant
             120:             TypePointer Output 10(fvec4)
             121:    120(ptr) Variable Output
             125:    6(float) Constant 1065353216
             126:     38(int) Constant 3
             127:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:   10(fvec4) Load 12(vs_TEXCOORD0)
              15:   13(fvec2) VectorShuffle 14 14 0 1
              22:     21(ptr) AccessChain 18 20
              23:   13(fvec2) Load 22
              24:   13(fvec2) FMul 15 23
              25:    7(fvec3) Load 9
              26:    7(fvec3) VectorShuffle 25 24 3 4 2
                              Store 9 26
              34:     33(ptr) AccessChain 31 32
              35:   10(fvec4) Load 34
              36:   13(fvec2) VectorShuffle 35 35 0 0
              41:     40(ptr) AccessChain 18 37 39
              42:    6(float) Load 41
              44:     40(ptr) AccessChain 18 37 43
              45:    6(float) Load 44
              46:   13(fvec2) CompositeConstruct 42 45
              47:   13(fvec2) FMul 36 46
                              Store 28 47
              52:          49 Load 51
              56:          53 Load 55
              58:          57 SampledImage 52 56
              59:   10(fvec4) Load 12(vs_TEXCOORD0)
              60:   13(fvec2) VectorShuffle 59 59 0 1
              61:   10(fvec4) ImageSampleImplicitLod 58 60
              62:    7(fvec3) VectorShuffle 61 61 0 1 2
                              Store 48 62
              63:    7(fvec3) Load 9
              64:   13(fvec2) VectorShuffle 63 63 0 1
              65:    7(fvec3) Load 48
              66:   13(fvec2) VectorShuffle 65 65 0 1
              67:   13(fvec2) FMul 64 66
              68:   13(fvec2) Load 28
              69:   13(fvec2) FAdd 67 68
              70:    7(fvec3) Load 9
              71:    7(fvec3) VectorShuffle 70 69 3 4 2
                              Store 9 71
              74:          49 Load 73
              76:          53 Load 75
              77:          57 SampledImage 74 76
              78:    7(fvec3) Load 9
              79:   13(fvec2) VectorShuffle 78 78 0 1
              80:   10(fvec4) ImageSampleImplicitLod 77 79
              81:    7(fvec3) VectorShuffle 80 80 0 1 2
                              Store 72 81
              82:    7(fvec3) Load 72
              83:     33(ptr) AccessChain 18 32
              84:   10(fvec4) Load 83
              85:    7(fvec3) VectorShuffle 84 84 0 1 2
              86:    7(fvec3) FMul 82 85
                              Store 9 86
              89:   10(fvec4) Load 88(vs_TEXCOORD1)
              90:    7(fvec3) VectorShuffle 89 89 0 1 2
              92:     40(ptr) AccessChain 18 91
              93:    6(float) Load 92
              94:    7(fvec3) CompositeConstruct 93 93 93
              95:    7(fvec3) FMul 90 94
                              Store 87 95
              96:    7(fvec3) Load 9
              97:    7(fvec3) Load 87
              98:    7(fvec3) FMul 96 97
                              Store 9 98
             101:          49 Load 100
             103:          53 Load 102
             104:          57 SampledImage 101 103
             105:   10(fvec4) Load 12(vs_TEXCOORD0)
             106:   13(fvec2) VectorShuffle 105 105 0 1
             107:   10(fvec4) ImageSampleImplicitLod 104 106
             108:    7(fvec3) VectorShuffle 107 107 0 1 2
                              Store 99 108
             109:    7(fvec3) Load 9
             110:    7(fvec3) Load 99
             111:    7(fvec3) FMul 109 110
             112:    7(fvec3) Load 99
             113:    7(fvec3) FNegate 112
             114:    7(fvec3) FAdd 111 113
                              Store 9 114
             115:    7(fvec3) Load 48
             116:    7(fvec3) Load 9
             117:    7(fvec3) FMul 115 116
             118:    7(fvec3) Load 99
             119:    7(fvec3) FAdd 117 118
                              Store 9 119
             122:    7(fvec3) Load 9
             123:   10(fvec4) Load 121
             124:   10(fvec4) VectorShuffle 123 122 4 5 6 3
                              Store 121 124
             128:    127(ptr) AccessChain 121 126
                              Store 128 125
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 10 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
// SV_InstanceID            0   x           5   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint   x   
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[1349], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[12], dynamicIndexed
      dcl_input v0.xyz
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_input_sgv v5.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.x
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_temps 2
   0: iadd r0.x, v5.x, cb1[0].x
   1: ishl r0.x, r0.x, l(3)
   2: mul r0.yzw, v0.yyyy, cb2[r0.x + 1].xxyz
   3: mad r0.yzw, cb2[r0.x + 0].xxyz, v0.xxxx, r0.yyzw
   4: mad r0.yzw, cb2[r0.x + 2].xxyz, v0.zzzz, r0.yyzw
   5: add r0.xyz, r0.yzwy, cb2[r0.x + 3].xyzx
   6: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
   7: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
   8: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
   9: add o0.xyzw, r0.xyzw, cb0[1348].xyzw
  10: mov o1.x, v5.x
  11: mov o2.xyzw, v3.xyzw
  12: mov o3.xyzw, v4.xyzw
  13: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 8 math, 3 temp registers, 3 textures
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Vector4 _TimeParameters at 20704
}
Constant Buffer "UnityPerMaterial" (48 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 20
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint       
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[1295], immediateIndexed
      dcl_constantbuffer CB1[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v2.xy
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: mul r0.xy, v2.xyxx, cb1[2].xyxx
   1: mul r0.zw, cb0[1294].xxxx, cb1[1].yyyz
   2: sample r1.xyzw, v2.xyxx, t2.xyzw, s2
   3: mad r0.xy, r0.xyxx, r1.xyxx, r0.zwzz
   4: sample r0.xyzw, r0.xyxx, t0.xyzw, s0
   5: mul r0.xyz, r0.xyzx, cb1[0].xyzx
   6: mul r2.xyz, v3.xyzx, cb1[1].xxxx
   7: mul r0.xyz, r0.xyzx, r2.xyzx
   8: sample r2.xyzw, v2.xyxx, t1.xyzw, s1
   9: mad r0.xyz, r0.xyzx, r2.xyzx, -r2.xyzx
  10: mad o0.xyz, r1.xyzx, r0.xyzx, r2.xyzx
  11: mov o0.w, l(1.000000)
  12: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (68 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
flat out highp uint vs_CUSTOM_INSTANCE_ID0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat2.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 Color_C8B04CD6;
	UNITY_UNIFORM float Vector1_BEE363EB;
	UNITY_UNIFORM vec2 Vector2_A455A09;
	UNITY_UNIFORM vec2 Vector2_CE5DC7AB;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform mediump sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform mediump sampler2D Texture2D_8FF63723;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat16_1.xyz = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xy = u_xlat0.xy * u_xlat16_1.xy + u_xlat6.xy;
    u_xlat16_0.xyz = texture(Texture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat16_2.xyz = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "VGlobals" (64 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    uint CUSTOM_INSTANCE_ID0 [[ user(CUSTOM_INSTANCE_ID0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float3 u_xlat2;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat2.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = u_xlat2.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.CUSTOM_INSTANCE_ID0 = mtl_InstanceID;
    output.TEXCOORD0 = input.TEXCOORD0;
    output.TEXCOORD1 = input.COLOR0;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "FGlobals" (16 bytes) on slot 0 {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _TimeParameters;
};

struct UnityPerMaterial_Type
{
    float4 Color_C8B04CD6;
    float Vector1_BEE363EB;
    float2 Vector2_A455A09;
    float2 Vector2_CE5DC7AB;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    sampler samplerTexture2D_B857C0CC [[ sampler (0) ]],
    sampler samplerTexture2D_CAC5E1DB [[ sampler (1) ]],
    sampler samplerTexture2D_8FF63723 [[ sampler (2) ]],
    texture2d<float, access::sample > Texture2D_B857C0CC [[ texture(0) ]] ,
    texture2d<float, access::sample > Texture2D_CAC5E1DB [[ texture(1) ]] ,
    texture2d<float, access::sample > Texture2D_8FF63723 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float2 u_xlat6;
    u_xlat0.xy = input.TEXCOORD0.xy * UnityPerMaterial.Vector2_CE5DC7AB.xyxx.xy;
    u_xlat6.xy = FGlobals._TimeParameters.xx * UnityPerMaterial.Vector2_A455A09.xxyx.yz;
    u_xlat1.xyz = Texture2D_8FF63723.sample(samplerTexture2D_8FF63723, input.TEXCOORD0.xy).xyz;
    u_xlat0.xy = fma(u_xlat0.xy, u_xlat1.xy, u_xlat6.xy);
    u_xlat0.xyz = Texture2D_B857C0CC.sample(samplerTexture2D_B857C0CC, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * UnityPerMaterial.Color_C8B04CD6.xyz;
    u_xlat2.xyz = input.TEXCOORD1.xyz * float3(UnityPerMaterial.Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = Texture2D_CAC5E1DB.sample(samplerTexture2D_CAC5E1DB, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat2.xyz));
    output.SV_TARGET0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat2.xyz);
    output.SV_TARGET0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "Texture2D_B857C0CC" to slot 0
Set 2D Texture "Texture2D_CAC5E1DB" to slot 1
Set 2D Texture "Texture2D_8FF63723" to slot 2

Constant Buffer "$Globals" (16 bytes) {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityPerMaterial" (40 bytes) on slot 1 {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "$Globals" (68 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 1193305451 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec3 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
flat out uint vs_CUSTOM_INSTANCE_ID0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _TimeParameters;
UNITY_BINDING(0) uniform UnityPerMaterial {
	vec4 Color_C8B04CD6;
	float Vector1_BEE363EB;
	vec2 Vector2_A455A09;
	vec2 Vector2_CE5DC7AB;
};
UNITY_LOCATION(0) uniform  sampler2D Texture2D_B857C0CC;
UNITY_LOCATION(1) uniform  sampler2D Texture2D_CAC5E1DB;
UNITY_LOCATION(2) uniform  sampler2D Texture2D_8FF63723;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_TARGET0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec2 u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * Vector2_CE5DC7AB.xy;
    u_xlat6.xy = _TimeParameters.xx * vec2(Vector2_A455A09.x, Vector2_A455A09.y);
    u_xlat10_1 = texture(Texture2D_8FF63723, vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat0.xy * u_xlat10_1.xy + u_xlat6.xy;
    u_xlat10_0 = texture(Texture2D_B857C0CC, u_xlat0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * Color_C8B04CD6.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz * vec3(Vector1_BEE363EB);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat10_2 = texture(Texture2D_CAC5E1DB, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_2.xyz + (-u_xlat10_2.xyz);
    SV_TARGET0.xyz = u_xlat10_1.xyz * u_xlat0.xyz + u_xlat10_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: DIRLIGHTMAP_COMBINED INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Set 2D Texture "Texture2D_8FF63723" to set: 0, binding: 5, used in: Fragment  using sampler in set: 0, binding: 2, used in: Fragment 
Set 2D Texture "Texture2D_B857C0CC" to set: 0, binding: 3, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 
Set 2D Texture "Texture2D_CAC5E1DB" to set: 0, binding: 4, used in: Fragment  using sampler in set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals4197363630" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _TimeParameters at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 3, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 4, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
  }
}
Constant Buffer "UnityPerMaterial" (40 bytes) on set: 1, binding: 1, used in: Fragment  {
  Vector4 Color_C8B04CD6 at 0
  Float Vector1_BEE363EB at 16
  Vector2 Vector2_A455A09 at 24
  Vector2 Vector2_CE5DC7AB at 32
}
Constant Buffer "VGlobals4197363630" (64 bytes) on set: 1, binding: 2, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 135

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 28 111 119 122 124 126 127
                              Name 122  "vs_TEXCOORD0"
                              Name 126  "vs_TEXCOORD1"
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 3
                              Decorate 28 Location 0
                              Decorate 34 ArrayStride 16
                              Decorate 35 ArrayStride 16
                              MemberDecorate 36 0 Offset 0
                              MemberDecorate 36 1 Offset 64
                              Decorate 37 SpecId 0
                              Decorate 38 ArrayStride 128
                              MemberDecorate 39 0 Offset 0
                              Decorate 39 Block
                              Decorate 41 DescriptorSet 1
                              Decorate 41 Binding 4
                              Decorate 86 ArrayStride 16
                              MemberDecorate 87 0 Offset 0
                              Decorate 87 Block
                              Decorate 89 DescriptorSet 1
                              Decorate 89 Binding 2
                              MemberDecorate 109 0 BuiltIn Position
                              MemberDecorate 109 1 BuiltIn PointSize
                              MemberDecorate 109 2 BuiltIn ClipDistance
                              Decorate 109 Block
                              Decorate 119 Flat
                              Decorate 119 Location 2
                              Decorate 122(vs_TEXCOORD0) Location 0
                              Decorate 124 Location 1
                              Decorate 126(vs_TEXCOORD1) Location 1
                              Decorate 127 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              21:      6(int) Constant 3
              23:             TypeFloat 32
              24:             TypeVector 23(float) 3
              25:             TypePointer Private 24(fvec3)
              26:     25(ptr) Variable Private
              27:             TypePointer Input 24(fvec3)
              28:     27(ptr) Variable Input
              31:             TypeVector 23(float) 4
              32:             TypeInt 32 0
              33:     32(int) Constant 4
              34:             TypeArray 31(fvec4) 33
              35:             TypeArray 31(fvec4) 33
              36:             TypeStruct 34 35
              37:      6(int) SpecConstant 2
              38:             TypeArray 36(struct) 37
              39:             TypeStruct 38
              40:             TypePointer Uniform 39(struct)
              41:     40(ptr) Variable Uniform
              43:      6(int) Constant 8
              45:      6(int) Constant 1
              46:             TypePointer Uniform 31(fvec4)
              63:      6(int) Constant 2
              72:             TypePointer Private 31(fvec4)
              73:     72(ptr) Variable Private
              83:     72(ptr) Variable Private
              86:             TypeArray 31(fvec4) 33
              87:             TypeStruct 86
              88:             TypePointer Uniform 87(struct)
              89:     88(ptr) Variable Uniform
             107:     32(int) Constant 1
             108:             TypeArray 23(float) 107
             109:             TypeStruct 31(fvec4) 23(float) 108
             110:             TypePointer Output 109(struct)
             111:    110(ptr) Variable Output
             116:             TypePointer Output 31(fvec4)
             118:             TypePointer Output 32(int)
             119:    118(ptr) Variable Output
122(vs_TEXCOORD0):    116(ptr) Variable Output
             123:             TypePointer Input 31(fvec4)
             124:    123(ptr) Variable Input
126(vs_TEXCOORD1):    116(ptr) Variable Output
             127:    123(ptr) Variable Input
             129:             TypePointer Output 23(float)
               4:           2 Function None 3
               5:             Label
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              20:      6(int) Load 8
              22:      6(int) ShiftLeftLogical 20 21
                              Store 8 22
              29:   24(fvec3) Load 28
              30:   24(fvec3) VectorShuffle 29 29 1 1 1
              42:      6(int) Load 8
              44:      6(int) SDiv 42 43
              47:     46(ptr) AccessChain 41 15 44 15 45
              48:   31(fvec4) Load 47
              49:   24(fvec3) VectorShuffle 48 48 0 1 2
              50:   24(fvec3) FMul 30 49
                              Store 26 50
              51:      6(int) Load 8
              52:      6(int) SDiv 51 43
              53:     46(ptr) AccessChain 41 15 52 15 15
              54:   31(fvec4) Load 53
              55:   24(fvec3) VectorShuffle 54 54 0 1 2
              56:   24(fvec3) Load 28
              57:   24(fvec3) VectorShuffle 56 56 0 0 0
              58:   24(fvec3) FMul 55 57
              59:   24(fvec3) Load 26
              60:   24(fvec3) FAdd 58 59
                              Store 26 60
              61:      6(int) Load 8
              62:      6(int) SDiv 61 43
              64:     46(ptr) AccessChain 41 15 62 15 63
              65:   31(fvec4) Load 64
              66:   24(fvec3) VectorShuffle 65 65 0 1 2
              67:   24(fvec3) Load 28
              68:   24(fvec3) VectorShuffle 67 67 2 2 2
              69:   24(fvec3) FMul 66 68
              70:   24(fvec3) Load 26
              71:   24(fvec3) FAdd 69 70
                              Store 26 71
              74:   24(fvec3) Load 26
              75:      6(int) Load 8
              76:      6(int) SDiv 75 43
              77:     46(ptr) AccessChain 41 15 76 15 21
              78:   31(fvec4) Load 77
              79:   24(fvec3) VectorShuffle 78 78 0 1 2
              80:   24(fvec3) FAdd 74 79
              81:   31(fvec4) Load 73
              82:   31(fvec4) VectorShuffle 81 80 4 5 6 3
                              Store 73 82
              84:   31(fvec4) Load 73
              85:   31(fvec4) VectorShuffle 84 84 1 1 1 1
              90:     46(ptr) AccessChain 89 15 45
              91:   31(fvec4) Load 90
              92:   31(fvec4) FMul 85 91
                              Store 83 92
              93:     46(ptr) AccessChain 89 15 15
              94:   31(fvec4) Load 93
              95:   31(fvec4) Load 73
              96:   31(fvec4) VectorShuffle 95 95 0 0 0 0
              97:   31(fvec4) FMul 94 96
              98:   31(fvec4) Load 83
              99:   31(fvec4) FAdd 97 98
                              Store 83 99
             100:     46(ptr) AccessChain 89 15 63
             101:   31(fvec4) Load 100
             102:   31(fvec4) Load 73
             103:   31(fvec4) VectorShuffle 102 102 2 2 2 2
             104:   31(fvec4) FMul 101 103
             105:   31(fvec4) Load 83
             106:   31(fvec4) FAdd 104 105
                              Store 73 106
             112:   31(fvec4) Load 73
             113:     46(ptr) AccessChain 89 15 21
             114:   31(fvec4) Load 113
             115:   31(fvec4) FAdd 112 114
             117:    116(ptr) AccessChain 111 15
                              Store 117 115
             120:      6(int) Load 10
             121:     32(int) Bitcast 120
                              Store 119 121
             125:   31(fvec4) Load 124
                              Store 122(vs_TEXCOORD0) 125
             128:   31(fvec4) Load 127
                              Store 126(vs_TEXCOORD1) 128
             130:    129(ptr) AccessChain 111 15 107
             131:   23(float) Load 130
             132:   23(float) FNegate 131
             133:    129(ptr) AccessChain 111 15 107
                              Store 133 132
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 130

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 12 88 121
                              ExecutionMode 4 OriginUpperLeft
                              Name 12  "vs_TEXCOORD0"
                              Name 88  "vs_TEXCOORD1"
                              Decorate 12(vs_TEXCOORD0) Location 0
                              MemberDecorate 16 0 Offset 0
                              MemberDecorate 16 1 Offset 16
                              MemberDecorate 16 2 Offset 24
                              MemberDecorate 16 3 Offset 32
                              Decorate 16 Block
                              Decorate 18 DescriptorSet 1
                              Decorate 18 Binding 1
                              MemberDecorate 29 0 Offset 0
                              Decorate 29 Block
                              Decorate 31 DescriptorSet 1
                              Decorate 31 Binding 0
                              Decorate 48 RelaxedPrecision
                              Decorate 51 RelaxedPrecision
                              Decorate 51 DescriptorSet 0
                              Decorate 51 Binding 5
                              Decorate 52 RelaxedPrecision
                              Decorate 55 RelaxedPrecision
                              Decorate 55 DescriptorSet 0
                              Decorate 55 Binding 2
                              Decorate 56 RelaxedPrecision
                              Decorate 62 RelaxedPrecision
                              Decorate 65 RelaxedPrecision
                              Decorate 66 RelaxedPrecision
                              Decorate 72 RelaxedPrecision
                              Decorate 73 RelaxedPrecision
                              Decorate 73 DescriptorSet 0
                              Decorate 73 Binding 3
                              Decorate 74 RelaxedPrecision
                              Decorate 75 RelaxedPrecision
                              Decorate 75 DescriptorSet 0
                              Decorate 75 Binding 0
                              Decorate 76 RelaxedPrecision
                              Decorate 81 RelaxedPrecision
                              Decorate 82 RelaxedPrecision
                              Decorate 88(vs_TEXCOORD1) Location 1
                              Decorate 99 RelaxedPrecision
                              Decorate 100 RelaxedPrecision
                              Decorate 100 DescriptorSet 0
                              Decorate 100 Binding 4
                              Decorate 101 RelaxedPrecision
                              Decorate 102 RelaxedPrecision
                              Decorate 102 DescriptorSet 0
                              Decorate 102 Binding 1
                              Decorate 103 RelaxedPrecision
                              Decorate 108 RelaxedPrecision
                              Decorate 110 RelaxedPrecision
                              Decorate 112 RelaxedPrecision
                              Decorate 113 RelaxedPrecision
                              Decorate 115 RelaxedPrecision
                              Decorate 118 RelaxedPrecision
                              Decorate 121 RelaxedPrecision
                              Decorate 121 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypePointer Input 10(fvec4)
12(vs_TEXCOORD0):     11(ptr) Variable Input
              13:             TypeVector 6(float) 2
              16:             TypeStruct 10(fvec4) 6(float) 13(fvec2) 13(fvec2)
              17:             TypePointer Uniform 16(struct)
              18:     17(ptr) Variable Uniform
              19:             TypeInt 32 1
              20:     19(int) Constant 3
              21:             TypePointer Uniform 13(fvec2)
              27:             TypePointer Private 13(fvec2)
              28:     27(ptr) Variable Private
              29:             TypeStruct 10(fvec4)
              30:             TypePointer Uniform 29(struct)
              31:     30(ptr) Variable Uniform
              32:     19(int) Constant 0
              33:             TypePointer Uniform 10(fvec4)
              37:     19(int) Constant 2
              38:             TypeInt 32 0
              39:     38(int) Constant 0
              40:             TypePointer Uniform 6(float)
              43:     38(int) Constant 1
              48:      8(ptr) Variable Private
              49:             TypeImage 6(float) 2D sampled format:Unknown
              50:             TypePointer UniformConstant 49
              51:     50(ptr) Variable UniformConstant
              53:             TypeSampler
              54:             TypePointer UniformConstant 53
              55:     54(ptr) Variable UniformConstant
              57:             TypeSampledImage 49
              72:      8(ptr) Variable Private
              73:     50(ptr) Variable UniformConstant
              75:     54(ptr) Variable UniformConstant
              87:      8(ptr) Variable Private
88(vs_TEXCOORD1):     11(ptr) Variable Input
              91:     19(int) Constant 1
              99:      8(ptr) Variable Private
             100:     50(ptr) Variable UniformConstant
             102:     54(ptr) Variable UniformConstant
             120:             TypePointer Output 10(fvec4)
             121:    120(ptr) Variable Output
             125:    6(float) Constant 1065353216
             126:     38(int) Constant 3
             127:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:   10(fvec4) Load 12(vs_TEXCOORD0)
              15:   13(fvec2) VectorShuffle 14 14 0 1
              22:     21(ptr) AccessChain 18 20
              23:   13(fvec2) Load 22
              24:   13(fvec2) FMul 15 23
              25:    7(fvec3) Load 9
              26:    7(fvec3) VectorShuffle 25 24 3 4 2
                              Store 9 26
              34:     33(ptr) AccessChain 31 32
              35:   10(fvec4) Load 34
              36:   13(fvec2) VectorShuffle 35 35 0 0
              41:     40(ptr) AccessChain 18 37 39
              42:    6(float) Load 41
              44:     40(ptr) AccessChain 18 37 43
              45:    6(float) Load 44
              46:   13(fvec2) CompositeConstruct 42 45
              47:   13(fvec2) FMul 36 46
                              Store 28 47
              52:          49 Load 51
              56:          53 Load 55
              58:          57 SampledImage 52 56
              59:   10(fvec4) Load 12(vs_TEXCOORD0)
              60:   13(fvec2) VectorShuffle 59 59 0 1
              61:   10(fvec4) ImageSampleImplicitLod 58 60
              62:    7(fvec3) VectorShuffle 61 61 0 1 2
                              Store 48 62
              63:    7(fvec3) Load 9
              64:   13(fvec2) VectorShuffle 63 63 0 1
              65:    7(fvec3) Load 48
              66:   13(fvec2) VectorShuffle 65 65 0 1
              67:   13(fvec2) FMul 64 66
              68:   13(fvec2) Load 28
              69:   13(fvec2) FAdd 67 68
              70:    7(fvec3) Load 9
              71:    7(fvec3) VectorShuffle 70 69 3 4 2
                              Store 9 71
              74:          49 Load 73
              76:          53 Load 75
              77:          57 SampledImage 74 76
              78:    7(fvec3) Load 9
              79:   13(fvec2) VectorShuffle 78 78 0 1
              80:   10(fvec4) ImageSampleImplicitLod 77 79
              81:    7(fvec3) VectorShuffle 80 80 0 1 2
                              Store 72 81
              82:    7(fvec3) Load 72
              83:     33(ptr) AccessChain 18 32
              84:   10(fvec4) Load 83
              85:    7(fvec3) VectorShuffle 84 84 0 1 2
              86:    7(fvec3) FMul 82 85
                              Store 9 86
              89:   10(fvec4) Load 88(vs_TEXCOORD1)
              90:    7(fvec3) VectorShuffle 89 89 0 1 2
              92:     40(ptr) AccessChain 18 91
              93:    6(float) Load 92
              94:    7(fvec3) CompositeConstruct 93 93 93
              95:    7(fvec3) FMul 90 94
                              Store 87 95
              96:    7(fvec3) Load 9
              97:    7(fvec3) Load 87
              98:    7(fvec3) FMul 96 97
                              Store 9 98
             101:          49 Load 100
             103:          53 Load 102
             104:          57 SampledImage 101 103
             105:   10(fvec4) Load 12(vs_TEXCOORD0)
             106:   13(fvec2) VectorShuffle 105 105 0 1
             107:   10(fvec4) ImageSampleImplicitLod 104 106
             108:    7(fvec3) VectorShuffle 107 107 0 1 2
                              Store 99 108
             109:    7(fvec3) Load 9
             110:    7(fvec3) Load 99
             111:    7(fvec3) FMul 109 110
             112:    7(fvec3) Load 99
             113:    7(fvec3) FNegate 112
             114:    7(fvec3) FAdd 111 113
                              Store 9 114
             115:    7(fvec3) Load 48
             116:    7(fvec3) Load 9
             117:    7(fvec3) FMul 115 116
             118:    7(fvec3) Load 99
             119:    7(fvec3) FAdd 117 118
                              Store 9 119
             122:    7(fvec3) Load 9
             123:   10(fvec4) Load 121
             124:   10(fvec4) VectorShuffle 123 122 4 5 6 3
                              Store 121 124
             128:    127(ptr) AccessChain 121 126
                              Store 128 125
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //        d3d11: 22 avg math (21..23)
 Pass {
  Name "ShadowCaster"
  Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry+0" "RenderType"="Opaque" "RenderPipeline"="UniversalPipeline" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 21 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "$Globals" (43408 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
  Vector4 _ShadowBias at 43328
  Vector3 _LightDirection at 43392
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[2713], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_output_siv o0.xyzw, position
      dcl_temps 2
   0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
   1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
   2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   3: add r0.xyz, r0.xyzx, cb1[3].xyzx
   4: mad r0.xyz, cb0[2712].xyzx, cb0[2708].xxxx, r0.xyzx
   5: dp3 r1.x, v1.xyzx, cb1[4].xyzx
   6: dp3 r1.y, v1.xyzx, cb1[5].xyzx
   7: dp3 r1.z, v1.xyzx, cb1[6].xyzx
   8: dp3 r0.w, r1.xyzx, r1.xyzx
   9: max r0.w, r0.w, l(0.000000)
  10: rsq r0.w, r0.w
  11: mul r1.xyz, r0.wwww, r1.xyzx
  12: dp3_sat r0.w, cb0[2712].xyzx, r1.xyzx
  13: add r0.w, -r0.w, l(1.000000)
  14: mul r0.w, r0.w, cb0[2708].y
  15: mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
  16: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
  17: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
  18: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
  19: add r0.xyzw, r0.xyzw, cb0[1348].xyzw
  20: min o0.z, r0.w, r0.z
  21: mov o0.xyw, r0.xyxw
  22: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (92 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 _ShadowBias at 64
  Vector3 _LightDirection at 80
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (96 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 _ShadowBias at 64
  Vector3 _LightDirection at 80
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _ShadowBias;
    float3 _LightDirection;
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_ProbesOcclusion;
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = fma(VGlobals._LightDirection.xyzx.xyz, VGlobals._ShadowBias.xxx, u_xlat0.xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(VGlobals._LightDirection.xyzx.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * VGlobals._ShadowBias.y;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat6), u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position.z = min(u_xlat0.w, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (92 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 _ShadowBias at 64
  Vector3 _LightDirection at 80
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 331 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "UnityPerDraw" (384 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "VGlobals2800129762" (92 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
  Vector3 _LightDirection at 80
  Vector4 _ShadowBias at 64
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 196

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 12 83 176
                              Decorate 12 Location 0
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 64
                              MemberDecorate 21 2 Offset 128
                              MemberDecorate 21 3 RelaxedPrecision
                              MemberDecorate 21 3 Offset 144
                              MemberDecorate 21 4 RelaxedPrecision
                              MemberDecorate 21 4 Offset 160
                              MemberDecorate 21 5 RelaxedPrecision
                              MemberDecorate 21 5 Offset 176
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 RelaxedPrecision
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 RelaxedPrecision
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 RelaxedPrecision
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 RelaxedPrecision
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 RelaxedPrecision
                              MemberDecorate 21 13 Offset 320
                              MemberDecorate 21 14 RelaxedPrecision
                              MemberDecorate 21 14 Offset 336
                              MemberDecorate 21 15 RelaxedPrecision
                              MemberDecorate 21 15 Offset 352
                              MemberDecorate 21 16 RelaxedPrecision
                              MemberDecorate 21 16 Offset 368
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 1
                              Decorate 66 ArrayStride 16
                              MemberDecorate 67 0 Offset 0
                              MemberDecorate 67 1 Offset 64
                              MemberDecorate 67 2 Offset 80
                              Decorate 67 Block
                              Decorate 69 DescriptorSet 1
                              Decorate 69 Binding 0
                              Decorate 83 Location 1
                              MemberDecorate 174 0 BuiltIn Position
                              MemberDecorate 174 1 BuiltIn PointSize
                              MemberDecorate 174 2 BuiltIn ClipDistance
                              Decorate 174 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:     15(int) Constant 2
              20:             TypeArray 7(fvec4) 19
              21:             TypeStruct 17 18 7(fvec4) 7(fvec4) 7(fvec4) 20 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 0
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              45:     24(int) Constant 2
              59:     24(int) Constant 3
              66:             TypeArray 7(fvec4) 16
              67:             TypeStruct 66 7(fvec4) 10(fvec3)
              68:             TypePointer Uniform 67(struct)
              69:     68(ptr) Variable Uniform
              70:             TypePointer Uniform 10(fvec3)
              82:      8(ptr) Variable Private
              83:     11(ptr) Variable Input
              89:     15(int) Constant 0
              90:             TypePointer Private 6(float)
              97:     15(int) Constant 1
             105:     90(ptr) Variable Private
             112:    6(float) Constant 8388608
             129:    6(float) Constant 0
             130:    6(float) Constant 1065353216
             136:             TypePointer Uniform 6(float)
             173:             TypeArray 6(float) 97
             174:             TypeStruct 7(fvec4) 6(float) 173
             175:             TypePointer Output 174(struct)
             176:    175(ptr) Variable Output
             177:     15(int) Constant 3
             183:             TypePointer Output 6(float)
             187:             TypePointer Output 7(fvec4)
               4:           2 Function None 3
               5:             Label
              13:   10(fvec3) Load 12
              14:   10(fvec3) VectorShuffle 13 13 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:   10(fvec3) VectorShuffle 29 29 0 1 2
              31:   10(fvec3) FMul 14 30
              32:    7(fvec4) Load 9
              33:    7(fvec4) VectorShuffle 32 31 4 5 6 3
                              Store 9 33
              34:     27(ptr) AccessChain 23 25 25
              35:    7(fvec4) Load 34
              36:   10(fvec3) VectorShuffle 35 35 0 1 2
              37:   10(fvec3) Load 12
              38:   10(fvec3) VectorShuffle 37 37 0 0 0
              39:   10(fvec3) FMul 36 38
              40:    7(fvec4) Load 9
              41:   10(fvec3) VectorShuffle 40 40 0 1 2
              42:   10(fvec3) FAdd 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) VectorShuffle 43 42 4 5 6 3
                              Store 9 44
              46:     27(ptr) AccessChain 23 25 45
              47:    7(fvec4) Load 46
              48:   10(fvec3) VectorShuffle 47 47 0 1 2
              49:   10(fvec3) Load 12
              50:   10(fvec3) VectorShuffle 49 49 2 2 2
              51:   10(fvec3) FMul 48 50
              52:    7(fvec4) Load 9
              53:   10(fvec3) VectorShuffle 52 52 0 1 2
              54:   10(fvec3) FAdd 51 53
              55:    7(fvec4) Load 9
              56:    7(fvec4) VectorShuffle 55 54 4 5 6 3
                              Store 9 56
              57:    7(fvec4) Load 9
              58:   10(fvec3) VectorShuffle 57 57 0 1 2
              60:     27(ptr) AccessChain 23 25 59
              61:    7(fvec4) Load 60
              62:   10(fvec3) VectorShuffle 61 61 0 1 2
              63:   10(fvec3) FAdd 58 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 63 4 5 6 3
                              Store 9 65
              71:     70(ptr) AccessChain 69 45
              72:   10(fvec3) Load 71
              73:     27(ptr) AccessChain 69 26
              74:    7(fvec4) Load 73
              75:   10(fvec3) VectorShuffle 74 74 0 0 0
              76:   10(fvec3) FMul 72 75
              77:    7(fvec4) Load 9
              78:   10(fvec3) VectorShuffle 77 77 0 1 2
              79:   10(fvec3) FAdd 76 78
              80:    7(fvec4) Load 9
              81:    7(fvec4) VectorShuffle 80 79 4 5 6 3
                              Store 9 81
              84:   10(fvec3) Load 83
              85:     27(ptr) AccessChain 23 26 25
              86:    7(fvec4) Load 85
              87:   10(fvec3) VectorShuffle 86 86 0 1 2
              88:    6(float) Dot 84 87
              91:     90(ptr) AccessChain 82 89
                              Store 91 88
              92:   10(fvec3) Load 83
              93:     27(ptr) AccessChain 23 26 26
              94:    7(fvec4) Load 93
              95:   10(fvec3) VectorShuffle 94 94 0 1 2
              96:    6(float) Dot 92 95
              98:     90(ptr) AccessChain 82 97
                              Store 98 96
              99:   10(fvec3) Load 83
             100:     27(ptr) AccessChain 23 26 45
             101:    7(fvec4) Load 100
             102:   10(fvec3) VectorShuffle 101 101 0 1 2
             103:    6(float) Dot 99 102
             104:     90(ptr) AccessChain 82 19
                              Store 104 103
             106:    7(fvec4) Load 82
             107:   10(fvec3) VectorShuffle 106 106 0 1 2
             108:    7(fvec4) Load 82
             109:   10(fvec3) VectorShuffle 108 108 0 1 2
             110:    6(float) Dot 107 109
                              Store 105 110
             111:    6(float) Load 105
             113:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 111 112
                              Store 105 113
             114:    6(float) Load 105
             115:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 114
                              Store 105 115
             116:    6(float) Load 105
             117:   10(fvec3) CompositeConstruct 116 116 116
             118:    7(fvec4) Load 82
             119:   10(fvec3) VectorShuffle 118 118 0 1 2
             120:   10(fvec3) FMul 117 119
             121:    7(fvec4) Load 82
             122:    7(fvec4) VectorShuffle 121 120 4 5 6 3
                              Store 82 122
             123:     70(ptr) AccessChain 69 45
             124:   10(fvec3) Load 123
             125:    7(fvec4) Load 82
             126:   10(fvec3) VectorShuffle 125 125 0 1 2
             127:    6(float) Dot 124 126
                              Store 105 127
             128:    6(float) Load 105
             131:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 128 129 130
                              Store 105 131
             132:    6(float) Load 105
             133:    6(float) FNegate 132
             134:    6(float) FAdd 133 130
                              Store 105 134
             135:    6(float) Load 105
             137:    136(ptr) AccessChain 69 26 97
             138:    6(float) Load 137
             139:    6(float) FMul 135 138
                              Store 105 139
             140:    7(fvec4) Load 82
             141:   10(fvec3) VectorShuffle 140 140 0 1 2
             142:    6(float) Load 105
             143:   10(fvec3) CompositeConstruct 142 142 142
             144:   10(fvec3) FMul 141 143
             145:    7(fvec4) Load 9
             146:   10(fvec3) VectorShuffle 145 145 0 1 2
             147:   10(fvec3) FAdd 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             150:    7(fvec4) Load 9
             151:    7(fvec4) VectorShuffle 150 150 1 1 1 1
             152:     27(ptr) AccessChain 69 25 26
             153:    7(fvec4) Load 152
             154:    7(fvec4) FMul 151 153
                              Store 82 154
             155:     27(ptr) AccessChain 69 25 25
             156:    7(fvec4) Load 155
             157:    7(fvec4) Load 9
             158:    7(fvec4) VectorShuffle 157 157 0 0 0 0
             159:    7(fvec4) FMul 156 158
             160:    7(fvec4) Load 82
             161:    7(fvec4) FAdd 159 160
                              Store 82 161
             162:     27(ptr) AccessChain 69 25 45
             163:    7(fvec4) Load 162
             164:    7(fvec4) Load 9
             165:    7(fvec4) VectorShuffle 164 164 2 2 2 2
             166:    7(fvec4) FMul 163 165
             167:    7(fvec4) Load 82
             168:    7(fvec4) FAdd 166 167
                              Store 9 168
             169:    7(fvec4) Load 9
             170:     27(ptr) AccessChain 69 25 59
             171:    7(fvec4) Load 170
             172:    7(fvec4) FAdd 169 171
                              Store 9 172
             178:     90(ptr) AccessChain 9 177
             179:    6(float) Load 178
             180:     90(ptr) AccessChain 9 19
             181:    6(float) Load 180
             182:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 179 181
             184:    183(ptr) AccessChain 176 25 19
                              Store 184 182
             185:    7(fvec4) Load 9
             186:   10(fvec3) VectorShuffle 185 185 0 1 3
             188:    187(ptr) AccessChain 176 25
             189:    7(fvec4) Load 188
             190:    7(fvec4) VectorShuffle 189 186 4 5 2 6
                              Store 188 190
             191:    183(ptr) AccessChain 176 25 97
             192:    6(float) Load 191
             193:    6(float) FNegate 192
             194:    183(ptr) AccessChain 176 25 97
                              Store 194 193
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 23 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "$Globals" (43408 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
  Vector4 _ShadowBias at 43328
  Vector3 _LightDirection at 43392
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float       
// SV_InstanceID            0   x           3   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint   x   
//
      vs_4_0
      dcl_constantbuffer CB0[2713], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[15], dynamicIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_input_sgv v3.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.x
      dcl_temps 2
   0: iadd r0.x, v3.x, cb1[0].x
   1: ishl r0.x, r0.x, l(3)
   2: dp3 r1.x, v1.xyzx, cb2[r0.x + 4].xyzx
   3: dp3 r1.y, v1.xyzx, cb2[r0.x + 5].xyzx
   4: dp3 r1.z, v1.xyzx, cb2[r0.x + 6].xyzx
   5: dp3 r0.y, r1.xyzx, r1.xyzx
   6: max r0.y, r0.y, l(0.000000)
   7: rsq r0.y, r0.y
   8: mul r0.yzw, r0.yyyy, r1.xxyz
   9: dp3_sat r1.x, cb0[2712].xyzx, r0.yzwy
  10: add r1.x, -r1.x, l(1.000000)
  11: mul r1.x, r1.x, cb0[2708].y
  12: mul r1.yzw, v0.yyyy, cb2[r0.x + 1].xxyz
  13: mad r1.yzw, cb2[r0.x + 0].xxyz, v0.xxxx, r1.yyzw
  14: mad r1.yzw, cb2[r0.x + 2].xxyz, v0.zzzz, r1.yyzw
  15: add r1.yzw, r1.yyzw, cb2[r0.x + 3].xxyz
  16: mad r1.yzw, cb0[2712].xxyz, cb0[2708].xxxx, r1.yyzw
  17: mad r0.xyz, r0.yzwy, r1.xxxx, r1.yzwy
  18: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
  19: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
  20: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
  21: add r0.xyzw, r0.xyzw, cb0[1348].xyzw
  22: min o0.z, r0.w, r0.z
  23: mov o0.xyw, r0.xyxw
  24: mov o1.x, v3.x
  25: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (108 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 _ShadowBias at 80
  Vector3 _LightDirection at 96
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
flat out highp uint vs_CUSTOM_INSTANCE_ID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(_LightDirection.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * _ShadowBias.y;
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (96 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
  Vector4 _ShadowBias at 64
  Vector3 _LightDirection at 80
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _ShadowBias;
    float3 _LightDirection;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    uint CUSTOM_INSTANCE_ID0 [[ user(CUSTOM_INSTANCE_ID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(VGlobals._LightDirection.xyzx.xyz, u_xlat2.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ShadowBias.y;
    u_xlat3.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = fma(VGlobals._LightDirection.xyzx.xyz, VGlobals._ShadowBias.xxx, u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position.z = min(u_xlat0.w, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.CUSTOM_INSTANCE_ID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (108 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
  Vector4 _ShadowBias at 80
  Vector3 _LightDirection at 96
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 331 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
flat out uint vs_CUSTOM_INSTANCE_ID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(_LightDirection.xyz, u_xlat2.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * _ShadowBias.y;
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Normal"
Uses vertex data channel "Vertex"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 2, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}
Constant Buffer "VGlobals957008211" (92 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
  Vector3 _LightDirection at 80
  Vector4 _ShadowBias at 64
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 226

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 29 123 202 218
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 29 Location 1
                              Decorate 33 ArrayStride 16
                              Decorate 34 ArrayStride 16
                              MemberDecorate 35 0 Offset 0
                              MemberDecorate 35 1 Offset 64
                              Decorate 36 SpecId 0
                              Decorate 37 ArrayStride 128
                              MemberDecorate 38 0 Offset 0
                              Decorate 38 Block
                              Decorate 40 DescriptorSet 1
                              Decorate 40 Binding 2
                              Decorate 94 ArrayStride 16
                              MemberDecorate 95 0 Offset 0
                              MemberDecorate 95 1 Offset 64
                              MemberDecorate 95 2 Offset 80
                              Decorate 95 Block
                              Decorate 97 DescriptorSet 1
                              Decorate 97 Binding 0
                              Decorate 123 Location 0
                              MemberDecorate 200 0 BuiltIn Position
                              MemberDecorate 200 1 BuiltIn PointSize
                              MemberDecorate 200 2 BuiltIn ClipDistance
                              Decorate 200 Block
                              Decorate 218 Flat
                              Decorate 218 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              21:      6(int) Constant 3
              23:             TypeFloat 32
              24:             TypeVector 23(float) 4
              25:             TypePointer Private 24(fvec4)
              26:     25(ptr) Variable Private
              27:             TypeVector 23(float) 3
              28:             TypePointer Input 27(fvec3)
              29:     28(ptr) Variable Input
              31:             TypeInt 32 0
              32:     31(int) Constant 4
              33:             TypeArray 24(fvec4) 32
              34:             TypeArray 24(fvec4) 32
              35:             TypeStruct 33 34
              36:      6(int) SpecConstant 2
              37:             TypeArray 35(struct) 36
              38:             TypeStruct 37
              39:             TypePointer Uniform 38(struct)
              40:     39(ptr) Variable Uniform
              42:      6(int) Constant 8
              44:      6(int) Constant 1
              45:             TypePointer Uniform 24(fvec4)
              50:     31(int) Constant 0
              51:             TypePointer Private 23(float)
              60:     31(int) Constant 1
              65:      6(int) Constant 2
              70:     31(int) Constant 2
              72:             TypePointer Private 27(fvec3)
              73:     72(ptr) Variable Private
              82:   23(float) Constant 8388608
              94:             TypeArray 24(fvec4) 32
              95:             TypeStruct 94 24(fvec4) 27(fvec3)
              96:             TypePointer Uniform 95(struct)
              97:     96(ptr) Variable Uniform
              98:             TypePointer Uniform 27(fvec3)
             106:   23(float) Constant 0
             107:   23(float) Constant 1065353216
             117:             TypePointer Uniform 23(float)
             122:     72(ptr) Variable Private
             123:     28(ptr) Variable Input
             167:     25(ptr) Variable Private
             199:             TypeArray 23(float) 60
             200:             TypeStruct 24(fvec4) 23(float) 199
             201:             TypePointer Output 200(struct)
             202:    201(ptr) Variable Output
             203:     31(int) Constant 3
             209:             TypePointer Output 23(float)
             213:             TypePointer Output 24(fvec4)
             217:             TypePointer Output 31(int)
             218:    217(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              20:      6(int) Load 8
              22:      6(int) ShiftLeftLogical 20 21
                              Store 8 22
              30:   27(fvec3) Load 29
              41:      6(int) Load 8
              43:      6(int) SDiv 41 42
              46:     45(ptr) AccessChain 40 15 43 44 15
              47:   24(fvec4) Load 46
              48:   27(fvec3) VectorShuffle 47 47 0 1 2
              49:   23(float) Dot 30 48
              52:     51(ptr) AccessChain 26 50
                              Store 52 49
              53:   27(fvec3) Load 29
              54:      6(int) Load 8
              55:      6(int) SDiv 54 42
              56:     45(ptr) AccessChain 40 15 55 44 44
              57:   24(fvec4) Load 56
              58:   27(fvec3) VectorShuffle 57 57 0 1 2
              59:   23(float) Dot 53 58
              61:     51(ptr) AccessChain 26 60
                              Store 61 59
              62:   27(fvec3) Load 29
              63:      6(int) Load 8
              64:      6(int) SDiv 63 42
              66:     45(ptr) AccessChain 40 15 64 44 65
              67:   24(fvec4) Load 66
              68:   27(fvec3) VectorShuffle 67 67 0 1 2
              69:   23(float) Dot 62 68
              71:     51(ptr) AccessChain 26 70
                              Store 71 69
              74:   24(fvec4) Load 26
              75:   27(fvec3) VectorShuffle 74 74 0 1 2
              76:   24(fvec4) Load 26
              77:   27(fvec3) VectorShuffle 76 76 0 1 2
              78:   23(float) Dot 75 77
              79:     51(ptr) AccessChain 73 50
                              Store 79 78
              80:     51(ptr) AccessChain 73 50
              81:   23(float) Load 80
              83:   23(float) ExtInst 1(GLSL.std.450) 40(FMax) 81 82
              84:     51(ptr) AccessChain 73 50
                              Store 84 83
              85:     51(ptr) AccessChain 73 50
              86:   23(float) Load 85
              87:   23(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 86
              88:     51(ptr) AccessChain 73 50
                              Store 88 87
              89:   27(fvec3) Load 73
              90:   27(fvec3) VectorShuffle 89 89 0 0 0
              91:   24(fvec4) Load 26
              92:   27(fvec3) VectorShuffle 91 91 0 1 2
              93:   27(fvec3) FMul 90 92
                              Store 73 93
              99:     98(ptr) AccessChain 97 65
             100:   27(fvec3) Load 99
             101:   27(fvec3) Load 73
             102:   23(float) Dot 100 101
             103:     51(ptr) AccessChain 26 50
                              Store 103 102
             104:     51(ptr) AccessChain 26 50
             105:   23(float) Load 104
             108:   23(float) ExtInst 1(GLSL.std.450) 43(FClamp) 105 106 107
             109:     51(ptr) AccessChain 26 50
                              Store 109 108
             110:     51(ptr) AccessChain 26 50
             111:   23(float) Load 110
             112:   23(float) FNegate 111
             113:   23(float) FAdd 112 107
             114:     51(ptr) AccessChain 26 50
                              Store 114 113
             115:     51(ptr) AccessChain 26 50
             116:   23(float) Load 115
             118:    117(ptr) AccessChain 97 44 60
             119:   23(float) Load 118
             120:   23(float) FMul 116 119
             121:     51(ptr) AccessChain 26 50
                              Store 121 120
             124:   27(fvec3) Load 123
             125:   27(fvec3) VectorShuffle 124 124 1 1 1
             126:      6(int) Load 8
             127:      6(int) SDiv 126 42
             128:     45(ptr) AccessChain 40 15 127 15 44
             129:   24(fvec4) Load 128
             130:   27(fvec3) VectorShuffle 129 129 0 1 2
             131:   27(fvec3) FMul 125 130
                              Store 122 131
             132:      6(int) Load 8
             133:      6(int) SDiv 132 42
             134:     45(ptr) AccessChain 40 15 133 15 15
             135:   24(fvec4) Load 134
             136:   27(fvec3) VectorShuffle 135 135 0 1 2
             137:   27(fvec3) Load 123
             138:   27(fvec3) VectorShuffle 137 137 0 0 0
             139:   27(fvec3) FMul 136 138
             140:   27(fvec3) Load 122
             141:   27(fvec3) FAdd 139 140
                              Store 122 141
             142:      6(int) Load 8
             143:      6(int) SDiv 142 42
             144:     45(ptr) AccessChain 40 15 143 15 65
             145:   24(fvec4) Load 144
             146:   27(fvec3) VectorShuffle 145 145 0 1 2
             147:   27(fvec3) Load 123
             148:   27(fvec3) VectorShuffle 147 147 2 2 2
             149:   27(fvec3) FMul 146 148
             150:   27(fvec3) Load 122
             151:   27(fvec3) FAdd 149 150
                              Store 122 151
             152:   27(fvec3) Load 122
             153:      6(int) Load 8
             154:      6(int) SDiv 153 42
             155:     45(ptr) AccessChain 40 15 154 15 21
             156:   24(fvec4) Load 155
             157:   27(fvec3) VectorShuffle 156 156 0 1 2
             158:   27(fvec3) FAdd 152 157
                              Store 122 158
             159:     98(ptr) AccessChain 97 65
             160:   27(fvec3) Load 159
             161:     45(ptr) AccessChain 97 44
             162:   24(fvec4) Load 161
             163:   27(fvec3) VectorShuffle 162 162 0 0 0
             164:   27(fvec3) FMul 160 163
             165:   27(fvec3) Load 122
             166:   27(fvec3) FAdd 164 165
                              Store 122 166
             168:   27(fvec3) Load 73
             169:   24(fvec4) Load 26
             170:   27(fvec3) VectorShuffle 169 169 0 0 0
             171:   27(fvec3) FMul 168 170
             172:   27(fvec3) Load 122
             173:   27(fvec3) FAdd 171 172
             174:   24(fvec4) Load 167
             175:   24(fvec4) VectorShuffle 174 173 4 5 6 3
                              Store 167 175
             176:   24(fvec4) Load 167
             177:   24(fvec4) VectorShuffle 176 176 1 1 1 1
             178:     45(ptr) AccessChain 97 15 44
             179:   24(fvec4) Load 178
             180:   24(fvec4) FMul 177 179
                              Store 26 180
             181:     45(ptr) AccessChain 97 15 15
             182:   24(fvec4) Load 181
             183:   24(fvec4) Load 167
             184:   24(fvec4) VectorShuffle 183 183 0 0 0 0
             185:   24(fvec4) FMul 182 184
             186:   24(fvec4) Load 26
             187:   24(fvec4) FAdd 185 186
                              Store 26 187
             188:     45(ptr) AccessChain 97 15 65
             189:   24(fvec4) Load 188
             190:   24(fvec4) Load 167
             191:   24(fvec4) VectorShuffle 190 190 2 2 2 2
             192:   24(fvec4) FMul 189 191
             193:   24(fvec4) Load 26
             194:   24(fvec4) FAdd 192 193
                              Store 167 194
             195:   24(fvec4) Load 167
             196:     45(ptr) AccessChain 97 15 21
             197:   24(fvec4) Load 196
             198:   24(fvec4) FAdd 195 197
                              Store 167 198
             204:     51(ptr) AccessChain 167 203
             205:   23(float) Load 204
             206:     51(ptr) AccessChain 167 70
             207:   23(float) Load 206
             208:   23(float) ExtInst 1(GLSL.std.450) 37(FMin) 205 207
             210:    209(ptr) AccessChain 202 15 70
                              Store 210 208
             211:   24(fvec4) Load 167
             212:   27(fvec3) VectorShuffle 211 211 0 1 3
             214:    213(ptr) AccessChain 202 15
             215:   24(fvec4) Load 214
             216:   24(fvec4) VectorShuffle 215 212 4 5 2 6
                              Store 214 216
             219:      6(int) Load 10
             220:     31(int) Bitcast 219
                              Store 218 220
             221:    209(ptr) AccessChain 202 15 60
             222:   23(float) Load 221
             223:   23(float) FNegate 222
             224:    209(ptr) AccessChain 202 15 60
                              Store 224 223
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //        d3d11: 9 avg math (8..10)
 Pass {
  Name "DepthOnly"
  Tags { "LIGHTMODE"="DepthOnly" "QUEUE"="Geometry+0" "RenderType"="Opaque" "RenderPipeline"="UniversalPipeline" }
  ColorMask 0
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 8 math, 2 temp registers
Uses vertex data channel "Vertex"

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[1349], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_input v0.xyz
      dcl_output_siv o0.xyzw, position
      dcl_temps 2
   0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
   1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
   2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   3: add r0.xyz, r0.xyzx, cb1[3].xyzx
   4: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
   5: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
   6: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
   7: add o0.xyzw, r0.xyzw, cb0[1348].xyzw
   8: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (64 bytes) {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1937007457 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "VGlobals" (64 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_LightData;
    float4 unity_LightIndices[2];
    float4 unity_ProbesOcclusion;
    float4 unity_SpecCube0_HDR;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (64 bytes) {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityPerDraw" (384 bytes) on slot 331 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 unity_LODFade at 128
  Vector4 unity_WorldTransformParams at 144
  Vector4 unity_LightData at 160
  Vector4 unity_LightIndices[2] at 176
  Vector4 unity_ProbesOcclusion at 208
  Vector4 unity_SpecCube0_HDR at 224
  Vector4 unity_LightmapST at 240
  Vector4 unity_DynamicLightmapST at 256
  Vector4 unity_SHAr at 272
  Vector4 unity_SHAg at 288
  Vector4 unity_SHAb at 304
  Vector4 unity_SHBr at 320
  Vector4 unity_SHBg at 336
  Vector4 unity_SHBb at 352
  Vector4 unity_SHC at 368
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
in  vec3 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"

Constant Buffer "UnityPerDraw" (384 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "VGlobals697444599" (64 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 107

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 12 94
                              Decorate 12 Location 0
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 64
                              MemberDecorate 21 2 Offset 128
                              MemberDecorate 21 3 RelaxedPrecision
                              MemberDecorate 21 3 Offset 144
                              MemberDecorate 21 4 RelaxedPrecision
                              MemberDecorate 21 4 Offset 160
                              MemberDecorate 21 5 RelaxedPrecision
                              MemberDecorate 21 5 Offset 176
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 RelaxedPrecision
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 RelaxedPrecision
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 RelaxedPrecision
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 RelaxedPrecision
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 RelaxedPrecision
                              MemberDecorate 21 13 Offset 320
                              MemberDecorate 21 14 RelaxedPrecision
                              MemberDecorate 21 14 Offset 336
                              MemberDecorate 21 15 RelaxedPrecision
                              MemberDecorate 21 15 Offset 352
                              MemberDecorate 21 16 RelaxedPrecision
                              MemberDecorate 21 16 Offset 368
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 1
                              Decorate 69 ArrayStride 16
                              MemberDecorate 70 0 Offset 0
                              Decorate 70 Block
                              Decorate 72 DescriptorSet 1
                              Decorate 72 Binding 0
                              MemberDecorate 92 0 BuiltIn Position
                              MemberDecorate 92 1 BuiltIn PointSize
                              MemberDecorate 92 2 BuiltIn ClipDistance
                              Decorate 92 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:     15(int) Constant 2
              20:             TypeArray 7(fvec4) 19
              21:             TypeStruct 17 18 7(fvec4) 7(fvec4) 7(fvec4) 20 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 0
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              45:     24(int) Constant 2
              59:     24(int) Constant 3
              66:      8(ptr) Variable Private
              69:             TypeArray 7(fvec4) 16
              70:             TypeStruct 69
              71:             TypePointer Uniform 70(struct)
              72:     71(ptr) Variable Uniform
              90:     15(int) Constant 1
              91:             TypeArray 6(float) 90
              92:             TypeStruct 7(fvec4) 6(float) 91
              93:             TypePointer Output 92(struct)
              94:     93(ptr) Variable Output
              99:             TypePointer Output 7(fvec4)
             101:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:   10(fvec3) Load 12
              14:   10(fvec3) VectorShuffle 13 13 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:   10(fvec3) VectorShuffle 29 29 0 1 2
              31:   10(fvec3) FMul 14 30
              32:    7(fvec4) Load 9
              33:    7(fvec4) VectorShuffle 32 31 4 5 6 3
                              Store 9 33
              34:     27(ptr) AccessChain 23 25 25
              35:    7(fvec4) Load 34
              36:   10(fvec3) VectorShuffle 35 35 0 1 2
              37:   10(fvec3) Load 12
              38:   10(fvec3) VectorShuffle 37 37 0 0 0
              39:   10(fvec3) FMul 36 38
              40:    7(fvec4) Load 9
              41:   10(fvec3) VectorShuffle 40 40 0 1 2
              42:   10(fvec3) FAdd 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) VectorShuffle 43 42 4 5 6 3
                              Store 9 44
              46:     27(ptr) AccessChain 23 25 45
              47:    7(fvec4) Load 46
              48:   10(fvec3) VectorShuffle 47 47 0 1 2
              49:   10(fvec3) Load 12
              50:   10(fvec3) VectorShuffle 49 49 2 2 2
              51:   10(fvec3) FMul 48 50
              52:    7(fvec4) Load 9
              53:   10(fvec3) VectorShuffle 52 52 0 1 2
              54:   10(fvec3) FAdd 51 53
              55:    7(fvec4) Load 9
              56:    7(fvec4) VectorShuffle 55 54 4 5 6 3
                              Store 9 56
              57:    7(fvec4) Load 9
              58:   10(fvec3) VectorShuffle 57 57 0 1 2
              60:     27(ptr) AccessChain 23 25 59
              61:    7(fvec4) Load 60
              62:   10(fvec3) VectorShuffle 61 61 0 1 2
              63:   10(fvec3) FAdd 58 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 63 4 5 6 3
                              Store 9 65
              67:    7(fvec4) Load 9
              68:    7(fvec4) VectorShuffle 67 67 1 1 1 1
              73:     27(ptr) AccessChain 72 25 26
              74:    7(fvec4) Load 73
              75:    7(fvec4) FMul 68 74
                              Store 66 75
              76:     27(ptr) AccessChain 72 25 25
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 9
              79:    7(fvec4) VectorShuffle 78 78 0 0 0 0
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 66
              82:    7(fvec4) FAdd 80 81
                              Store 66 82
              83:     27(ptr) AccessChain 72 25 45
              84:    7(fvec4) Load 83
              85:    7(fvec4) Load 9
              86:    7(fvec4) VectorShuffle 85 85 2 2 2 2
              87:    7(fvec4) FMul 84 86
              88:    7(fvec4) Load 66
              89:    7(fvec4) FAdd 87 88
                              Store 9 89
              95:    7(fvec4) Load 9
              96:     27(ptr) AccessChain 72 25 59
              97:    7(fvec4) Load 96
              98:    7(fvec4) FAdd 95 97
             100:     99(ptr) AccessChain 94 25
                              Store 100 98
             102:    101(ptr) AccessChain 94 25 90
             103:    6(float) Load 102
             104:    6(float) FNegate 103
             105:    101(ptr) AccessChain 94 25 90
                              Store 105 104
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 10 math, 2 temp registers
Uses vertex data channel "Vertex"

Constant Buffer "$Globals" (43392 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 21520
}
Constant Buffer "UnityDrawCallInfo" (16 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// SV_InstanceID            0   x           3   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint   x   
//
      vs_4_0
      dcl_constantbuffer CB0[1349], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_constantbuffer CB2[12], dynamicIndexed
      dcl_input v0.xyz
      dcl_input_sgv v3.x, instance_id
      dcl_output_siv o0.xyzw, position
      dcl_output o1.x
      dcl_temps 2
   0: iadd r0.x, v3.x, cb1[0].x
   1: ishl r0.x, r0.x, l(3)
   2: mul r0.yzw, v0.yyyy, cb2[r0.x + 1].xxyz
   3: mad r0.yzw, cb2[r0.x + 0].xxyz, v0.xxxx, r0.yyzw
   4: mad r0.yzw, cb2[r0.x + 2].xxyz, v0.zzzz, r0.yyzw
   5: add r0.xyz, r0.yzwy, cb2[r0.x + 3].xyzx
   6: mul r1.xyzw, r0.yyyy, cb0[1346].xyzw
   7: mad r1.xyzw, cb0[1345].xyzw, r0.xxxx, r1.xyzw
   8: mad r0.xyzw, cb0[1347].xyzw, r0.zzzz, r1.xyzw
   9: add o0.xyzw, r0.xyzw, cb0[1348].xyzw
  10: mov o1.x, v3.x
  11: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// CUSTOM_INSTANCE_ID       0   x           1     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_output o0.xyzw
   0: mov o0.xyzw, l(0,0,0,0)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Constant Buffer "$Globals" (68 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 1936291436 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
flat out highp uint vs_CUSTOM_INSTANCE_ID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = int(u_xlati0 << 3);
    u_xlat2.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "VGlobals" (64 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 0
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 2 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_Builtins0Array_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
    float4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};

struct UnityInstancing_PerDraw0_Type
{
    unity_Builtins0Array_Type unity_Builtins0Array[2];
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    uint CUSTOM_INSTANCE_ID0 [[ user(CUSTOM_INSTANCE_ID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant unity_Builtins0Array_Type* UnityInstancing_PerDraw0 [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float3 u_xlat2;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 0x3;
    u_xlat2.xyz = input.POSITION0.yyy * UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, input.POSITION0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, input.POSITION0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = u_xlat2.xyz + UnityInstancing_PerDraw0[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.CUSTOM_INSTANCE_ID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_TARGET0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_TARGET0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Constant Buffer "$Globals" (68 bytes) {
  Matrix4x4 unity_MatrixVP at 0
  ScalarInt unity_BaseInstanceID at 64
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on slot 0 {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
    Matrix4x4 unity_WorldToObjectArray at 64
  }
}

Shader Disassembly:
#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec3 in_POSITION0;
flat out uint vs_CUSTOM_INSTANCE_ID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_CUSTOM_INSTANCE_ID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

layout(location = 0) out vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"

Specialization constant id: 0 name: "UNITY_RUNTIME_INSTANCING_ARRAY_SIZE", used in: Vertex 

Constant Buffer "UnityDrawCallInfo" (8 bytes) on set: 1, binding: 1, used in: Vertex  {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_PerDraw0" (256 bytes) on set: 1, binding: 2, used in: Vertex  {
  Struct unity_Builtins0Array [128][2] at 0 {
    Matrix4x4 unity_ObjectToWorldArray at 0
  }
}
Constant Buffer "VGlobals2038816436" (64 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 0
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 128

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 10 28 111 119
                              Decorate 10 BuiltIn InstanceIndex
                              MemberDecorate 12 0 Offset 0
                              MemberDecorate 12 1 Offset 4
                              Decorate 12 Block
                              Decorate 14 DescriptorSet 1
                              Decorate 14 Binding 1
                              Decorate 28 Location 0
                              Decorate 34 ArrayStride 16
                              Decorate 35 ArrayStride 16
                              MemberDecorate 36 0 Offset 0
                              MemberDecorate 36 1 Offset 64
                              Decorate 37 SpecId 0
                              Decorate 38 ArrayStride 128
                              MemberDecorate 39 0 Offset 0
                              Decorate 39 Block
                              Decorate 41 DescriptorSet 1
                              Decorate 41 Binding 2
                              Decorate 86 ArrayStride 16
                              MemberDecorate 87 0 Offset 0
                              Decorate 87 Block
                              Decorate 89 DescriptorSet 1
                              Decorate 89 Binding 0
                              MemberDecorate 109 0 BuiltIn Position
                              MemberDecorate 109 1 BuiltIn PointSize
                              MemberDecorate 109 2 BuiltIn ClipDistance
                              Decorate 109 Block
                              Decorate 119 Flat
                              Decorate 119 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeInt 32 1
               7:             TypePointer Private 6(int)
               8:      7(ptr) Variable Private
               9:             TypePointer Input 6(int)
              10:      9(ptr) Variable Input
              12:             TypeStruct 6(int) 6(int)
              13:             TypePointer Uniform 12(struct)
              14:     13(ptr) Variable Uniform
              15:      6(int) Constant 0
              16:             TypePointer Uniform 6(int)
              21:      6(int) Constant 3
              23:             TypeFloat 32
              24:             TypeVector 23(float) 3
              25:             TypePointer Private 24(fvec3)
              26:     25(ptr) Variable Private
              27:             TypePointer Input 24(fvec3)
              28:     27(ptr) Variable Input
              31:             TypeVector 23(float) 4
              32:             TypeInt 32 0
              33:     32(int) Constant 4
              34:             TypeArray 31(fvec4) 33
              35:             TypeArray 31(fvec4) 33
              36:             TypeStruct 34 35
              37:      6(int) SpecConstant 2
              38:             TypeArray 36(struct) 37
              39:             TypeStruct 38
              40:             TypePointer Uniform 39(struct)
              41:     40(ptr) Variable Uniform
              43:      6(int) Constant 8
              45:      6(int) Constant 1
              46:             TypePointer Uniform 31(fvec4)
              63:      6(int) Constant 2
              72:             TypePointer Private 31(fvec4)
              73:     72(ptr) Variable Private
              83:     72(ptr) Variable Private
              86:             TypeArray 31(fvec4) 33
              87:             TypeStruct 86
              88:             TypePointer Uniform 87(struct)
              89:     88(ptr) Variable Uniform
             107:     32(int) Constant 1
             108:             TypeArray 23(float) 107
             109:             TypeStruct 31(fvec4) 23(float) 108
             110:             TypePointer Output 109(struct)
             111:    110(ptr) Variable Output
             116:             TypePointer Output 31(fvec4)
             118:             TypePointer Output 32(int)
             119:    118(ptr) Variable Output
             122:             TypePointer Output 23(float)
               4:           2 Function None 3
               5:             Label
              11:      6(int) Load 10
              17:     16(ptr) AccessChain 14 15
              18:      6(int) Load 17
              19:      6(int) IAdd 11 18
                              Store 8 19
              20:      6(int) Load 8
              22:      6(int) ShiftLeftLogical 20 21
                              Store 8 22
              29:   24(fvec3) Load 28
              30:   24(fvec3) VectorShuffle 29 29 1 1 1
              42:      6(int) Load 8
              44:      6(int) SDiv 42 43
              47:     46(ptr) AccessChain 41 15 44 15 45
              48:   31(fvec4) Load 47
              49:   24(fvec3) VectorShuffle 48 48 0 1 2
              50:   24(fvec3) FMul 30 49
                              Store 26 50
              51:      6(int) Load 8
              52:      6(int) SDiv 51 43
              53:     46(ptr) AccessChain 41 15 52 15 15
              54:   31(fvec4) Load 53
              55:   24(fvec3) VectorShuffle 54 54 0 1 2
              56:   24(fvec3) Load 28
              57:   24(fvec3) VectorShuffle 56 56 0 0 0
              58:   24(fvec3) FMul 55 57
              59:   24(fvec3) Load 26
              60:   24(fvec3) FAdd 58 59
                              Store 26 60
              61:      6(int) Load 8
              62:      6(int) SDiv 61 43
              64:     46(ptr) AccessChain 41 15 62 15 63
              65:   31(fvec4) Load 64
              66:   24(fvec3) VectorShuffle 65 65 0 1 2
              67:   24(fvec3) Load 28
              68:   24(fvec3) VectorShuffle 67 67 2 2 2
              69:   24(fvec3) FMul 66 68
              70:   24(fvec3) Load 26
              71:   24(fvec3) FAdd 69 70
                              Store 26 71
              74:   24(fvec3) Load 26
              75:      6(int) Load 8
              76:      6(int) SDiv 75 43
              77:     46(ptr) AccessChain 41 15 76 15 21
              78:   31(fvec4) Load 77
              79:   24(fvec3) VectorShuffle 78 78 0 1 2
              80:   24(fvec3) FAdd 74 79
              81:   31(fvec4) Load 73
              82:   31(fvec4) VectorShuffle 81 80 4 5 6 3
                              Store 73 82
              84:   31(fvec4) Load 73
              85:   31(fvec4) VectorShuffle 84 84 1 1 1 1
              90:     46(ptr) AccessChain 89 15 45
              91:   31(fvec4) Load 90
              92:   31(fvec4) FMul 85 91
                              Store 83 92
              93:     46(ptr) AccessChain 89 15 15
              94:   31(fvec4) Load 93
              95:   31(fvec4) Load 73
              96:   31(fvec4) VectorShuffle 95 95 0 0 0 0
              97:   31(fvec4) FMul 94 96
              98:   31(fvec4) Load 83
              99:   31(fvec4) FAdd 97 98
                              Store 83 99
             100:     46(ptr) AccessChain 89 15 63
             101:   31(fvec4) Load 100
             102:   31(fvec4) Load 73
             103:   31(fvec4) VectorShuffle 102 102 2 2 2 2
             104:   31(fvec4) FMul 101 103
             105:   31(fvec4) Load 83
             106:   31(fvec4) FAdd 104 105
                              Store 73 106
             112:   31(fvec4) Load 73
             113:     46(ptr) AccessChain 89 15 21
             114:   31(fvec4) Load 113
             115:   31(fvec4) FAdd 112 114
             117:    116(ptr) AccessChain 111 15
                              Store 117 115
             120:      6(int) Load 10
             121:     32(int) Bitcast 120
                              Store 119 121
             123:    122(ptr) AccessChain 111 15 107
             124:   23(float) Load 123
             125:   23(float) FNegate 124
             126:    122(ptr) AccessChain 111 15 107
                              Store 126 125
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 13

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:    6(float) Constant 0
              11:    7(fvec4) ConstantComposite 10 10 10 10
               4:           2 Function None 3
               5:             Label
                              Store 9 11
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }
}
Fallback "Hidden/Shader Graph/FallbackError"
}